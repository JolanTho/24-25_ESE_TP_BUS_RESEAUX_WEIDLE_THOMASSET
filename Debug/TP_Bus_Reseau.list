
TP_Bus_Reseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005790  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08005960  08005960  00006960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c30  08005c30  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005c30  08005c30  00006c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c38  08005c38  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c38  08005c38  00006c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c3c  08005c3c  00006c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005c40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000070  08005cb0  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005cb0  000072ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8aa  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002201  00000000  00000000  0001394a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00015b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a5  00000000  00000000  00016680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c5d  00000000  00000000  00016f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105d2  00000000  00000000  00039b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccb5a  00000000  00000000  0004a154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116cae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  00116cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011a36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005948 	.word	0x08005948

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005948 	.word	0x08005948

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <checkID>:
short dig_P6 = 0;
short dig_P7 = 0;
short dig_P8 = 0;
short dig_P9 = 0;

int checkID(void){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af02      	add	r7, sp, #8
	retour = HAL_I2C_Master_Transmit(&hi2c1,BMP280_address, &ID_address, 1, HAL_MAX_DELAY);
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <checkID+0x7c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2301      	movs	r3, #1
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f1c <checkID+0x80>)
 8000eb2:	481b      	ldr	r0, [pc, #108]	@ (8000f20 <checkID+0x84>)
 8000eb4:	f001 fcc0 	bl	8002838 <HAL_I2C_Master_Transmit>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <checkID+0x88>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <checkID+0x88>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <checkID+0x36>
		printf("Erreur de l'I2C (ID-T)\r\n");
 8000ec8:	4817      	ldr	r0, [pc, #92]	@ (8000f28 <checkID+0x8c>)
 8000eca:	f003 fed9 	bl	8004c80 <puts>
		return 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e01e      	b.n	8000f10 <checkID+0x74>
	}
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_address, buffer, 1, HAL_MAX_DELAY);
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <checkID+0x7c>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <checkID+0x90>)
 8000ee2:	480f      	ldr	r0, [pc, #60]	@ (8000f20 <checkID+0x84>)
 8000ee4:	f001 fda6 	bl	8002a34 <HAL_I2C_Master_Receive>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <checkID+0x88>)
 8000eee:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <checkID+0x88>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <checkID+0x66>
		printf("Erreur de l'I2C (ID-R)\r\n");
 8000ef8:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <checkID+0x94>)
 8000efa:	f003 fec1 	bl	8004c80 <puts>
		return 1;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e006      	b.n	8000f10 <checkID+0x74>
	}
	printf("L'ID du capteur est 0x%x\r\n",buffer[0]);
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <checkID+0x90>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	480a      	ldr	r0, [pc, #40]	@ (8000f34 <checkID+0x98>)
 8000f0a:	f003 fe51 	bl	8004bb0 <iprintf>
	return 0;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000001 	.word	0x20000001
 8000f20:	200000b0 	.word	0x200000b0
 8000f24:	2000008c 	.word	0x2000008c
 8000f28:	08005960 	.word	0x08005960
 8000f2c:	20000090 	.word	0x20000090
 8000f30:	08005978 	.word	0x08005978
 8000f34:	08005990 	.word	0x08005990

08000f38 <BMP280_config>:

int BMP280_config(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8
	uint8_t buf[2];
	buf[0]= ctrl_meas;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <BMP280_config+0x94>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	713b      	strb	r3, [r7, #4]
	buf[1]= config;
 8000f44:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <BMP280_config+0x98>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	717b      	strb	r3, [r7, #5]
	retour = HAL_I2C_Master_Transmit(&hi2c1,BMP280_address, buf, 2, HAL_MAX_DELAY);
 8000f4a:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <BMP280_config+0x9c>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	1d3a      	adds	r2, r7, #4
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2302      	movs	r3, #2
 8000f5a:	481f      	ldr	r0, [pc, #124]	@ (8000fd8 <BMP280_config+0xa0>)
 8000f5c:	f001 fc6c 	bl	8002838 <HAL_I2C_Master_Transmit>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <BMP280_config+0xa4>)
 8000f66:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8000f68:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <BMP280_config+0xa4>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <BMP280_config+0x42>
		printf("Erreur l'I2C (Conf-T)\r\n");
 8000f70:	481b      	ldr	r0, [pc, #108]	@ (8000fe0 <BMP280_config+0xa8>)
 8000f72:	f003 fe85 	bl	8004c80 <puts>
		return 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e023      	b.n	8000fc2 <BMP280_config+0x8a>
	}
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_address, buffer, 1, HAL_MAX_DELAY);
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <BMP280_config+0x9c>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <BMP280_config+0xac>)
 8000f8a:	4813      	ldr	r0, [pc, #76]	@ (8000fd8 <BMP280_config+0xa0>)
 8000f8c:	f001 fd52 	bl	8002a34 <HAL_I2C_Master_Receive>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <BMP280_config+0xa4>)
 8000f96:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8000f98:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <BMP280_config+0xa4>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <BMP280_config+0x72>
		printf("Erreur de l'I2C(Conf-R)\r\n");
 8000fa0:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <BMP280_config+0xb0>)
 8000fa2:	f003 fe6d 	bl	8004c80 <puts>
		return 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00b      	b.n	8000fc2 <BMP280_config+0x8a>
	}

	if(buffer[0] == config){
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <BMP280_config+0xac>)
 8000fac:	781a      	ldrb	r2, [r3, #0]
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <BMP280_config+0x98>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d104      	bne.n	8000fc0 <BMP280_config+0x88>
		printf("La config envoye est bien recue\r\n");
 8000fb6:	480d      	ldr	r0, [pc, #52]	@ (8000fec <BMP280_config+0xb4>)
 8000fb8:	f003 fe62 	bl	8004c80 <puts>
		return 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e000      	b.n	8000fc2 <BMP280_config+0x8a>
	}
	return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000002 	.word	0x20000002
 8000fd0:	20000003 	.word	0x20000003
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	200000b0 	.word	0x200000b0
 8000fdc:	2000008c 	.word	0x2000008c
 8000fe0:	080059ac 	.word	0x080059ac
 8000fe4:	20000090 	.word	0x20000090
 8000fe8:	080059c4 	.word	0x080059c4
 8000fec:	080059e0 	.word	0x080059e0

08000ff0 <BMP_etalonage>:

void BMP_etalonage(void){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af02      	add	r7, sp, #8
	uint8_t receive_buf[24];

	retour = HAL_I2C_Master_Transmit(&hi2c1,BMP280_address, &calib, 1, HAL_MAX_DELAY);
 8000ff6:	4b58      	ldr	r3, [pc, #352]	@ (8001158 <BMP_etalonage+0x168>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	4a55      	ldr	r2, [pc, #340]	@ (800115c <BMP_etalonage+0x16c>)
 8001006:	4856      	ldr	r0, [pc, #344]	@ (8001160 <BMP_etalonage+0x170>)
 8001008:	f001 fc16 	bl	8002838 <HAL_I2C_Master_Transmit>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b54      	ldr	r3, [pc, #336]	@ (8001164 <BMP_etalonage+0x174>)
 8001012:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8001014:	4b53      	ldr	r3, [pc, #332]	@ (8001164 <BMP_etalonage+0x174>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <BMP_etalonage+0x32>
		printf("Erreur de l'I2C (Etalo-T)\r\n");
 800101c:	4852      	ldr	r0, [pc, #328]	@ (8001168 <BMP_etalonage+0x178>)
 800101e:	f003 fe2f 	bl	8004c80 <puts>
	}
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_address, receive_buf, 24, HAL_MAX_DELAY);
 8001022:	4b4d      	ldr	r3, [pc, #308]	@ (8001158 <BMP_etalonage+0x168>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	1d3a      	adds	r2, r7, #4
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2318      	movs	r3, #24
 8001032:	484b      	ldr	r0, [pc, #300]	@ (8001160 <BMP_etalonage+0x170>)
 8001034:	f001 fcfe 	bl	8002a34 <HAL_I2C_Master_Receive>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b49      	ldr	r3, [pc, #292]	@ (8001164 <BMP_etalonage+0x174>)
 800103e:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8001040:	4b48      	ldr	r3, [pc, #288]	@ (8001164 <BMP_etalonage+0x174>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <BMP_etalonage+0x5e>
		printf("Erreur de l'I2C (Etalo-R)\r\n");
 8001048:	4848      	ldr	r0, [pc, #288]	@ (800116c <BMP_etalonage+0x17c>)
 800104a:	f003 fe19 	bl	8004c80 <puts>
	}
	printf("les valeurs de l'etallonage sont :\r\n");
 800104e:	4848      	ldr	r0, [pc, #288]	@ (8001170 <BMP_etalonage+0x180>)
 8001050:	f003 fe16 	bl	8004c80 <puts>
	for(int i=0;i<24;i++){
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	e00b      	b.n	8001072 <BMP_etalonage+0x82>
		printf("calib %2d = 0x%x\r\n",i,receive_buf[i]);
 800105a:	1d3a      	adds	r2, r7, #4
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	69f9      	ldr	r1, [r7, #28]
 8001066:	4843      	ldr	r0, [pc, #268]	@ (8001174 <BMP_etalonage+0x184>)
 8001068:	f003 fda2 	bl	8004bb0 <iprintf>
	for(int i=0;i<24;i++){
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	3301      	adds	r3, #1
 8001070:	61fb      	str	r3, [r7, #28]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	2b17      	cmp	r3, #23
 8001076:	ddf0      	ble.n	800105a <BMP_etalonage+0x6a>
	}
	dig_T1 = receive_buf[0]|(receive_buf[1]<<8);
 8001078:	793b      	ldrb	r3, [r7, #4]
 800107a:	b21a      	sxth	r2, r3
 800107c:	797b      	ldrb	r3, [r7, #5]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b3c      	ldr	r3, [pc, #240]	@ (8001178 <BMP_etalonage+0x188>)
 8001088:	801a      	strh	r2, [r3, #0]
	dig_T2 = receive_buf[2]|(receive_buf[3]<<8);
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	b21a      	sxth	r2, r3
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b38      	ldr	r3, [pc, #224]	@ (800117c <BMP_etalonage+0x18c>)
 800109a:	801a      	strh	r2, [r3, #0]
	dig_T3 = receive_buf[4]|(receive_buf[5]<<8);
 800109c:	7a3b      	ldrb	r3, [r7, #8]
 800109e:	b21a      	sxth	r2, r3
 80010a0:	7a7b      	ldrb	r3, [r7, #9]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b35      	ldr	r3, [pc, #212]	@ (8001180 <BMP_etalonage+0x190>)
 80010ac:	801a      	strh	r2, [r3, #0]
	dig_P1 = receive_buf[6]|(receive_buf[7]<<8);
 80010ae:	7abb      	ldrb	r3, [r7, #10]
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b31      	ldr	r3, [pc, #196]	@ (8001184 <BMP_etalonage+0x194>)
 80010be:	801a      	strh	r2, [r3, #0]
	dig_P2 = receive_buf[8]|(receive_buf[9]<<8);
 80010c0:	7b3b      	ldrb	r3, [r7, #12]
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	7b7b      	ldrb	r3, [r7, #13]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <BMP_etalonage+0x198>)
 80010d0:	801a      	strh	r2, [r3, #0]
	dig_P3 = receive_buf[10]|(receive_buf[11]<<8);
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21b      	sxth	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <BMP_etalonage+0x19c>)
 80010e2:	801a      	strh	r2, [r3, #0]
	dig_P4 = receive_buf[12]|(receive_buf[13]<<8);
 80010e4:	7c3b      	ldrb	r3, [r7, #16]
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	7c7b      	ldrb	r3, [r7, #17]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <BMP_etalonage+0x1a0>)
 80010f4:	801a      	strh	r2, [r3, #0]
	dig_P5 = receive_buf[14]|(receive_buf[15]<<8);
 80010f6:	7cbb      	ldrb	r3, [r7, #18]
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	7cfb      	ldrb	r3, [r7, #19]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21b      	sxth	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b21a      	sxth	r2, r3
 8001104:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <BMP_etalonage+0x1a4>)
 8001106:	801a      	strh	r2, [r3, #0]
	dig_P6 = receive_buf[16]|(receive_buf[17]<<8);
 8001108:	7d3b      	ldrb	r3, [r7, #20]
 800110a:	b21a      	sxth	r2, r3
 800110c:	7d7b      	ldrb	r3, [r7, #21]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21a      	sxth	r2, r3
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <BMP_etalonage+0x1a8>)
 8001118:	801a      	strh	r2, [r3, #0]
	dig_P7 = receive_buf[18]|(receive_buf[19]<<8);
 800111a:	7dbb      	ldrb	r3, [r7, #22]
 800111c:	b21a      	sxth	r2, r3
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	b21b      	sxth	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b21a      	sxth	r2, r3
 8001128:	4b1c      	ldr	r3, [pc, #112]	@ (800119c <BMP_etalonage+0x1ac>)
 800112a:	801a      	strh	r2, [r3, #0]
	dig_P8 = receive_buf[20]|(receive_buf[21]<<8);
 800112c:	7e3b      	ldrb	r3, [r7, #24]
 800112e:	b21a      	sxth	r2, r3
 8001130:	7e7b      	ldrb	r3, [r7, #25]
 8001132:	021b      	lsls	r3, r3, #8
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <BMP_etalonage+0x1b0>)
 800113c:	801a      	strh	r2, [r3, #0]
	dig_P9 = receive_buf[22]|(receive_buf[23]<<8);
 800113e:	7ebb      	ldrb	r3, [r7, #26]
 8001140:	b21a      	sxth	r2, r3
 8001142:	7efb      	ldrb	r3, [r7, #27]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21a      	sxth	r2, r3
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <BMP_etalonage+0x1b4>)
 800114e:	801a      	strh	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000000 	.word	0x20000000
 800115c:	20000004 	.word	0x20000004
 8001160:	200000b0 	.word	0x200000b0
 8001164:	2000008c 	.word	0x2000008c
 8001168:	08005a04 	.word	0x08005a04
 800116c:	08005a20 	.word	0x08005a20
 8001170:	08005a3c 	.word	0x08005a3c
 8001174:	08005a60 	.word	0x08005a60
 8001178:	20000092 	.word	0x20000092
 800117c:	20000094 	.word	0x20000094
 8001180:	20000096 	.word	0x20000096
 8001184:	20000098 	.word	0x20000098
 8001188:	2000009a 	.word	0x2000009a
 800118c:	2000009c 	.word	0x2000009c
 8001190:	2000009e 	.word	0x2000009e
 8001194:	200000a0 	.word	0x200000a0
 8001198:	200000a2 	.word	0x200000a2
 800119c:	200000a4 	.word	0x200000a4
 80011a0:	200000a6 	.word	0x200000a6
 80011a4:	200000a8 	.word	0x200000a8

080011a8 <BMP_get_temp>:

int BMP_get_temp(void){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8

	uint8_t receive_buf[3];
	retour = HAL_I2C_Master_Transmit(&hi2c1,BMP280_address, &temp_add, 1, HAL_MAX_DELAY);
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <BMP_get_temp+0x7c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001228 <BMP_get_temp+0x80>)
 80011be:	481b      	ldr	r0, [pc, #108]	@ (800122c <BMP_get_temp+0x84>)
 80011c0:	f001 fb3a 	bl	8002838 <HAL_I2C_Master_Transmit>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <BMP_get_temp+0x88>)
 80011ca:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <BMP_get_temp+0x88>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <BMP_get_temp+0x32>
		printf("Erreur de l'I2C (GetT-T)\r\n");
 80011d4:	4817      	ldr	r0, [pc, #92]	@ (8001234 <BMP_get_temp+0x8c>)
 80011d6:	f003 fd53 	bl	8004c80 <puts>
	}
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_address, receive_buf, 3, HAL_MAX_DELAY);
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <BMP_get_temp+0x7c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4619      	mov	r1, r3
 80011e0:	463a      	mov	r2, r7
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2303      	movs	r3, #3
 80011ea:	4810      	ldr	r0, [pc, #64]	@ (800122c <BMP_get_temp+0x84>)
 80011ec:	f001 fc22 	bl	8002a34 <HAL_I2C_Master_Receive>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <BMP_get_temp+0x88>)
 80011f6:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 80011f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <BMP_get_temp+0x88>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <BMP_get_temp+0x5e>
		printf("Erreur de l'I2C (GetT-R)\r\n");
 8001200:	480d      	ldr	r0, [pc, #52]	@ (8001238 <BMP_get_temp+0x90>)
 8001202:	f003 fd3d 	bl	8004c80 <puts>
	}
	int nc_temp=receive_buf[0]<<12|receive_buf[1]<<4|receive_buf[2]>>4;
 8001206:	783b      	ldrb	r3, [r7, #0]
 8001208:	031a      	lsls	r2, r3, #12
 800120a:	787b      	ldrb	r3, [r7, #1]
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	4313      	orrs	r3, r2
 8001210:	78ba      	ldrb	r2, [r7, #2]
 8001212:	0912      	lsrs	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	4313      	orrs	r3, r2
 8001218:	607b      	str	r3, [r7, #4]
	return nc_temp;
 800121a:	687b      	ldr	r3, [r7, #4]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000000 	.word	0x20000000
 8001228:	20000005 	.word	0x20000005
 800122c:	200000b0 	.word	0x200000b0
 8001230:	2000008c 	.word	0x2000008c
 8001234:	08005a74 	.word	0x08005a74
 8001238:	08005a90 	.word	0x08005a90

0800123c <BMP_get_pres>:

int BMP_get_pres(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af02      	add	r7, sp, #8

	uint8_t receive_buf[3];
	retour = HAL_I2C_Master_Transmit(&hi2c1,BMP280_address, &pres_add, 1, HAL_MAX_DELAY);
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <BMP_get_pres+0x7c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4619      	mov	r1, r3
 8001248:	f04f 33ff 	mov.w	r3, #4294967295
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	4a1a      	ldr	r2, [pc, #104]	@ (80012bc <BMP_get_pres+0x80>)
 8001252:	481b      	ldr	r0, [pc, #108]	@ (80012c0 <BMP_get_pres+0x84>)
 8001254:	f001 faf0 	bl	8002838 <HAL_I2C_Master_Transmit>
 8001258:	4603      	mov	r3, r0
 800125a:	461a      	mov	r2, r3
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <BMP_get_pres+0x88>)
 800125e:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <BMP_get_pres+0x88>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <BMP_get_pres+0x32>
		printf("Erreur de l'I2C (GetP_T)\r\n");
 8001268:	4817      	ldr	r0, [pc, #92]	@ (80012c8 <BMP_get_pres+0x8c>)
 800126a:	f003 fd09 	bl	8004c80 <puts>
	}
	retour = HAL_I2C_Master_Receive(&hi2c1, BMP280_address, receive_buf, 3, HAL_MAX_DELAY);
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <BMP_get_pres+0x7c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	463a      	mov	r2, r7
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2303      	movs	r3, #3
 800127e:	4810      	ldr	r0, [pc, #64]	@ (80012c0 <BMP_get_pres+0x84>)
 8001280:	f001 fbd8 	bl	8002a34 <HAL_I2C_Master_Receive>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <BMP_get_pres+0x88>)
 800128a:	701a      	strb	r2, [r3, #0]
	if(retour != HAL_OK){
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <BMP_get_pres+0x88>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <BMP_get_pres+0x5e>
		printf("Erreur de l'I2C (GetP_R)\r\n");
 8001294:	480d      	ldr	r0, [pc, #52]	@ (80012cc <BMP_get_pres+0x90>)
 8001296:	f003 fcf3 	bl	8004c80 <puts>
	}
	int nc_pres=receive_buf[0]<<12|receive_buf[1]<<4|receive_buf[2]>>4;
 800129a:	783b      	ldrb	r3, [r7, #0]
 800129c:	031a      	lsls	r2, r3, #12
 800129e:	787b      	ldrb	r3, [r7, #1]
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	4313      	orrs	r3, r2
 80012a4:	78ba      	ldrb	r2, [r7, #2]
 80012a6:	0912      	lsrs	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	4313      	orrs	r3, r2
 80012ac:	607b      	str	r3, [r7, #4]
	return nc_pres;
 80012ae:	687b      	ldr	r3, [r7, #4]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000006 	.word	0x20000006
 80012c0:	200000b0 	.word	0x200000b0
 80012c4:	2000008c 	.word	0x2000008c
 80012c8:	08005aac 	.word	0x08005aac
 80012cc:	08005ac8 	.word	0x08005ac8

080012d0 <bmp280_compensate_T_double>:

// Returns temperature in DegC, double precision. Output value of “51.23” equals 51.23 DegC.
// t_fine carries fine temperature as global value
BMP280_S32_t t_fine;
double bmp280_compensate_T_double(BMP280_S32_t adc_T)
{
 80012d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012d4:	b08a      	sub	sp, #40	@ 0x28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	double var1, var2, T;
	int32_t t_fine;

	var1 = (((double)adc_T) / 16384.0 - ((double)dig_T1) / 1024.0) * ((double)dig_T2);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff f92a 	bl	8000534 <__aeabi_ui2d>
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4b59      	ldr	r3, [pc, #356]	@ (800144c <bmp280_compensate_T_double+0x17c>)
 80012e6:	f7ff fac9 	bl	800087c <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	4b57      	ldr	r3, [pc, #348]	@ (8001450 <bmp280_compensate_T_double+0x180>)
 80012f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f92b 	bl	8000554 <__aeabi_i2d>
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b54      	ldr	r3, [pc, #336]	@ (8001454 <bmp280_compensate_T_double+0x184>)
 8001304:	f7ff faba 	bl	800087c <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4620      	mov	r0, r4
 800130e:	4629      	mov	r1, r5
 8001310:	f7fe ffd2 	bl	80002b8 <__aeabi_dsub>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	4b4e      	ldr	r3, [pc, #312]	@ (8001458 <bmp280_compensate_T_double+0x188>)
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f916 	bl	8000554 <__aeabi_i2d>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4620      	mov	r0, r4
 800132e:	4629      	mov	r1, r5
 8001330:	f7ff f97a 	bl	8000628 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var2 = ((((double)adc_T) / 131072.0 - ((double)dig_T1) / 8192.0) * (((double)adc_T) / 131072.0 - ((double)dig_T1) / 8192.0)) * ((double)dig_T3);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff f8f9 	bl	8000534 <__aeabi_ui2d>
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800134a:	f7ff fa97 	bl	800087c <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4614      	mov	r4, r2
 8001354:	461d      	mov	r5, r3
 8001356:	4b3e      	ldr	r3, [pc, #248]	@ (8001450 <bmp280_compensate_T_double+0x180>)
 8001358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8f9 	bl	8000554 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b3d      	ldr	r3, [pc, #244]	@ (800145c <bmp280_compensate_T_double+0x18c>)
 8001368:	f7ff fa88 	bl	800087c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4620      	mov	r0, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f7fe ffa0 	bl	80002b8 <__aeabi_dsub>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4614      	mov	r4, r2
 800137e:	461d      	mov	r5, r3
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff f8d7 	bl	8000534 <__aeabi_ui2d>
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800138e:	f7ff fa75 	bl	800087c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4690      	mov	r8, r2
 8001398:	4699      	mov	r9, r3
 800139a:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <bmp280_compensate_T_double+0x180>)
 800139c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8d7 	bl	8000554 <__aeabi_i2d>
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <bmp280_compensate_T_double+0x18c>)
 80013ac:	f7ff fa66 	bl	800087c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4640      	mov	r0, r8
 80013b6:	4649      	mov	r1, r9
 80013b8:	f7fe ff7e 	bl	80002b8 <__aeabi_dsub>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4620      	mov	r0, r4
 80013c2:	4629      	mov	r1, r5
 80013c4:	f7ff f930 	bl	8000628 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4614      	mov	r4, r2
 80013ce:	461d      	mov	r5, r3
 80013d0:	4b23      	ldr	r3, [pc, #140]	@ (8001460 <bmp280_compensate_T_double+0x190>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8bc 	bl	8000554 <__aeabi_i2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7ff f920 	bl	8000628 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
	t_fine = (int32_t)(var1 + var2);
 80013f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013f8:	f7fe ff60 	bl	80002bc <__adddf3>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fbaa 	bl	8000b5c <__aeabi_d2iz>
 8001408:	4603      	mov	r3, r0
 800140a:	617b      	str	r3, [r7, #20]
	T = (var1 + var2) / 5120.0;
 800140c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001410:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001414:	f7fe ff52 	bl	80002bc <__adddf3>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <bmp280_compensate_T_double+0x194>)
 8001426:	f7ff fa29 	bl	800087c <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return T;
 8001432:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001436:	ec43 2b17 	vmov	d7, r2, r3
}
 800143a:	eeb0 0a47 	vmov.f32	s0, s14
 800143e:	eef0 0a67 	vmov.f32	s1, s15
 8001442:	3728      	adds	r7, #40	@ 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800144a:	bf00      	nop
 800144c:	40d00000 	.word	0x40d00000
 8001450:	20000092 	.word	0x20000092
 8001454:	40900000 	.word	0x40900000
 8001458:	20000094 	.word	0x20000094
 800145c:	40c00000 	.word	0x40c00000
 8001460:	20000096 	.word	0x20000096
 8001464:	40b40000 	.word	0x40b40000

08001468 <bmp280_compensate_P_double>:
// Returns pressure in Pa as double. Output value of “96386.2” equals 96386.2 Pa = 963.862 hPa
double bmp280_compensate_P_double(BMP280_S32_t adc_P)
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

	double var1, var2, p;

	var1 = ((double)t_fine / 2.0) - 64000.0;
 8001470:	4bc3      	ldr	r3, [pc, #780]	@ (8001780 <bmp280_compensate_P_double+0x318>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f85d 	bl	8000534 <__aeabi_ui2d>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001482:	f7ff f9fb 	bl	800087c <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4bbc      	ldr	r3, [pc, #752]	@ (8001784 <bmp280_compensate_P_double+0x31c>)
 8001494:	f7fe ff10 	bl	80002b8 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)dig_P6) / 32768.0;
 80014a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014a8:	f7ff f8be 	bl	8000628 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4614      	mov	r4, r2
 80014b2:	461d      	mov	r5, r3
 80014b4:	4bb4      	ldr	r3, [pc, #720]	@ (8001788 <bmp280_compensate_P_double+0x320>)
 80014b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f84a 	bl	8000554 <__aeabi_i2d>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7ff f8ae 	bl	8000628 <__aeabi_dmul>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4bac      	ldr	r3, [pc, #688]	@ (800178c <bmp280_compensate_P_double+0x324>)
 80014da:	f7ff f9cf 	bl	800087c <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)dig_P5) * 2.0;
 80014e6:	4baa      	ldr	r3, [pc, #680]	@ (8001790 <bmp280_compensate_P_double+0x328>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f831 	bl	8000554 <__aeabi_i2d>
 80014f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014f6:	f7ff f897 	bl	8000628 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	f7fe fed9 	bl	80002bc <__adddf3>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001512:	f7fe fed3 	bl	80002bc <__adddf3>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)dig_P4) * 65536.0);
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4b9c      	ldr	r3, [pc, #624]	@ (8001794 <bmp280_compensate_P_double+0x32c>)
 8001524:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001528:	f7ff f9a8 	bl	800087c <__aeabi_ddiv>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4614      	mov	r4, r2
 8001532:	461d      	mov	r5, r3
 8001534:	4b98      	ldr	r3, [pc, #608]	@ (8001798 <bmp280_compensate_P_double+0x330>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f80a 	bl	8000554 <__aeabi_i2d>
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4b95      	ldr	r3, [pc, #596]	@ (800179c <bmp280_compensate_P_double+0x334>)
 8001546:	f7ff f86f 	bl	8000628 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4620      	mov	r0, r4
 8001550:	4629      	mov	r1, r5
 8001552:	f7fe feb3 	bl	80002bc <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = (((double)dig_P3) * var1 * var1 / 524288.0 + ((double)dig_P2) * var1) / 524288.0;
 800155e:	4b90      	ldr	r3, [pc, #576]	@ (80017a0 <bmp280_compensate_P_double+0x338>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe fff5 	bl	8000554 <__aeabi_i2d>
 800156a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800156e:	f7ff f85b 	bl	8000628 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800157e:	f7ff f853 	bl	8000628 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b85      	ldr	r3, [pc, #532]	@ (80017a4 <bmp280_compensate_P_double+0x33c>)
 8001590:	f7ff f974 	bl	800087c <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4614      	mov	r4, r2
 800159a:	461d      	mov	r5, r3
 800159c:	4b82      	ldr	r3, [pc, #520]	@ (80017a8 <bmp280_compensate_P_double+0x340>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffd6 	bl	8000554 <__aeabi_i2d>
 80015a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015ac:	f7ff f83c 	bl	8000628 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7fe fe80 	bl	80002bc <__adddf3>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b76      	ldr	r3, [pc, #472]	@ (80017a4 <bmp280_compensate_P_double+0x33c>)
 80015ca:	f7ff f957 	bl	800087c <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)dig_P1);
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	4b6c      	ldr	r3, [pc, #432]	@ (800178c <bmp280_compensate_P_double+0x324>)
 80015dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80015e0:	f7ff f94c 	bl	800087c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	4b6e      	ldr	r3, [pc, #440]	@ (80017ac <bmp280_compensate_P_double+0x344>)
 80015f2:	f7fe fe63 	bl	80002bc <__adddf3>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4614      	mov	r4, r2
 80015fc:	461d      	mov	r5, r3
 80015fe:	4b6c      	ldr	r3, [pc, #432]	@ (80017b0 <bmp280_compensate_P_double+0x348>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ffa5 	bl	8000554 <__aeabi_i2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4620      	mov	r0, r4
 8001610:	4629      	mov	r1, r5
 8001612:	f7ff f809 	bl	8000628 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	if (var1 == 0.0) {
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800162a:	f7ff fa65 	bl	8000af8 <__aeabi_dcmpeq>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d004      	beq.n	800163e <bmp280_compensate_P_double+0x1d6>
	    return 0; // éviter la division par zéro
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e090      	b.n	8001760 <bmp280_compensate_P_double+0x2f8>
	}

	p = 1048576.0 - (double)adc_P;
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7fe ff78 	bl	8000534 <__aeabi_ui2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	4959      	ldr	r1, [pc, #356]	@ (80017b4 <bmp280_compensate_P_double+0x34c>)
 800164e:	f7fe fe33 	bl	80002b8 <__aeabi_dsub>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	e9c7 2302 	strd	r2, r3, [r7, #8]
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b56      	ldr	r3, [pc, #344]	@ (80017b8 <bmp280_compensate_P_double+0x350>)
 8001660:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001664:	f7ff f90a 	bl	800087c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001670:	f7fe fe22 	bl	80002b8 <__aeabi_dsub>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	a33e      	add	r3, pc, #248	@ (adr r3, 8001778 <bmp280_compensate_P_double+0x310>)
 800167e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001682:	f7fe ffd1 	bl	8000628 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001692:	f7ff f8f3 	bl	800087c <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = ((double)dig_P9) * p * p / 2147483648.0;
 800169e:	4b47      	ldr	r3, [pc, #284]	@ (80017bc <bmp280_compensate_P_double+0x354>)
 80016a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff55 	bl	8000554 <__aeabi_i2d>
 80016aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ae:	f7fe ffbb 	bl	8000628 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016be:	f7fe ffb3 	bl	8000628 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	4b3c      	ldr	r3, [pc, #240]	@ (80017c0 <bmp280_compensate_P_double+0x358>)
 80016d0:	f7ff f8d4 	bl	800087c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = p * ((double)dig_P8) / 32768.0;
 80016dc:	4b39      	ldr	r3, [pc, #228]	@ (80017c4 <bmp280_compensate_P_double+0x35c>)
 80016de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff36 	bl	8000554 <__aeabi_i2d>
 80016e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ec:	f7fe ff9c 	bl	8000628 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b23      	ldr	r3, [pc, #140]	@ (800178c <bmp280_compensate_P_double+0x324>)
 80016fe:	f7ff f8bd 	bl	800087c <__aeabi_ddiv>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	e9c7 2304 	strd	r2, r3, [r7, #16]
	p = p + (var1 + var2 + ((double)dig_P7)) / 16.0;
 800170a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800170e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001712:	f7fe fdd3 	bl	80002bc <__adddf3>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4614      	mov	r4, r2
 800171c:	461d      	mov	r5, r3
 800171e:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <bmp280_compensate_P_double+0x360>)
 8001720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff15 	bl	8000554 <__aeabi_i2d>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe fdc3 	bl	80002bc <__adddf3>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <bmp280_compensate_P_double+0x364>)
 8001744:	f7ff f89a 	bl	800087c <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001750:	f7fe fdb4 	bl	80002bc <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return p;
 800175c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]

}
 8001760:	ec43 2b17 	vmov	d7, r2, r3
 8001764:	eeb0 0a47 	vmov.f32	s0, s14
 8001768:	eef0 0a67 	vmov.f32	s1, s15
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bdb0      	pop	{r4, r5, r7, pc}
 8001772:	bf00      	nop
 8001774:	f3af 8000 	nop.w
 8001778:	00000000 	.word	0x00000000
 800177c:	40b86a00 	.word	0x40b86a00
 8001780:	200000ac 	.word	0x200000ac
 8001784:	40ef4000 	.word	0x40ef4000
 8001788:	200000a2 	.word	0x200000a2
 800178c:	40e00000 	.word	0x40e00000
 8001790:	200000a0 	.word	0x200000a0
 8001794:	40100000 	.word	0x40100000
 8001798:	2000009e 	.word	0x2000009e
 800179c:	40f00000 	.word	0x40f00000
 80017a0:	2000009c 	.word	0x2000009c
 80017a4:	41200000 	.word	0x41200000
 80017a8:	2000009a 	.word	0x2000009a
 80017ac:	3ff00000 	.word	0x3ff00000
 80017b0:	20000098 	.word	0x20000098
 80017b4:	41300000 	.word	0x41300000
 80017b8:	40b00000 	.word	0x40b00000
 80017bc:	200000a8 	.word	0x200000a8
 80017c0:	41e00000 	.word	0x41e00000
 80017c4:	200000a6 	.word	0x200000a6
 80017c8:	200000a4 	.word	0x200000a4
 80017cc:	40300000 	.word	0x40300000

080017d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	@ 0x28
 80017d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b24      	ldr	r3, [pc, #144]	@ (800187c <MX_GPIO_Init+0xac>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a23      	ldr	r2, [pc, #140]	@ (800187c <MX_GPIO_Init+0xac>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b21      	ldr	r3, [pc, #132]	@ (800187c <MX_GPIO_Init+0xac>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b1d      	ldr	r3, [pc, #116]	@ (800187c <MX_GPIO_Init+0xac>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a1c      	ldr	r2, [pc, #112]	@ (800187c <MX_GPIO_Init+0xac>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <MX_GPIO_Init+0xac>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b16      	ldr	r3, [pc, #88]	@ (800187c <MX_GPIO_Init+0xac>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a15      	ldr	r2, [pc, #84]	@ (800187c <MX_GPIO_Init+0xac>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <MX_GPIO_Init+0xac>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <MX_GPIO_Init+0xac>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a0e      	ldr	r2, [pc, #56]	@ (800187c <MX_GPIO_Init+0xac>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <MX_GPIO_Init+0xac>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001856:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800185c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4804      	ldr	r0, [pc, #16]	@ (8001880 <MX_GPIO_Init+0xb0>)
 800186e:	f000 fd0b 	bl	8002288 <HAL_GPIO_Init>

}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	@ 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40020800 	.word	0x40020800

08001884 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <MX_I2C1_Init+0x50>)
 800188a:	4a13      	ldr	r2, [pc, #76]	@ (80018d8 <MX_I2C1_Init+0x54>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <MX_I2C1_Init+0x50>)
 8001890:	4a12      	ldr	r2, [pc, #72]	@ (80018dc <MX_I2C1_Init+0x58>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001894:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MX_I2C1_Init+0x50>)
 80018a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	@ (80018d4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <MX_I2C1_Init+0x50>)
 80018c2:	f000 fe75 	bl	80025b0 <HAL_I2C_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018cc:	f000 f954 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200000b0 	.word	0x200000b0
 80018d8:	40005400 	.word	0x40005400
 80018dc:	000186a0 	.word	0x000186a0

080018e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	@ 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a19      	ldr	r2, [pc, #100]	@ (8001964 <HAL_I2C_MspInit+0x84>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12c      	bne.n	800195c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <HAL_I2C_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a17      	ldr	r2, [pc, #92]	@ (8001968 <HAL_I2C_MspInit+0x88>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_I2C_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800191e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001924:	2312      	movs	r3, #18
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001930:	2304      	movs	r3, #4
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	480c      	ldr	r0, [pc, #48]	@ (800196c <HAL_I2C_MspInit+0x8c>)
 800193c:	f000 fca4 	bl	8002288 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_I2C_MspInit+0x88>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	4a07      	ldr	r2, [pc, #28]	@ (8001968 <HAL_I2C_MspInit+0x88>)
 800194a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800194e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_I2C_MspInit+0x88>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	@ 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40005400 	.word	0x40005400
 8001968:	40023800 	.word	0x40023800
 800196c:	40020400 	.word	0x40020400

08001970 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr){
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8001978:	1d39      	adds	r1, r7, #4
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	2201      	movs	r2, #1
 8001980:	4803      	ldr	r0, [pc, #12]	@ (8001990 <__io_putchar+0x20>)
 8001982:	f002 fc97 	bl	80042b4 <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
	return chr;
 8001986:	687b      	ldr	r3, [r7, #4]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000154 	.word	0x20000154

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199a:	f000 faf9 	bl	8001f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199e:	f000 f879 	bl	8001a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a2:	f7ff ff15 	bl	80017d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019a6:	f000 fa23 	bl	8001df0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80019aa:	f7ff ff6b 	bl	8001884 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80019ae:	f000 f9f5 	bl	8001d9c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("=======TP RESEAU======== \r\n");
 80019b2:	482e      	ldr	r0, [pc, #184]	@ (8001a6c <main+0xd8>)
 80019b4:	f003 f964 	bl	8004c80 <puts>

  // Début de connection avec le composant + Gestion d'erreurs

	if(checkID()==0){
 80019b8:	f7ff fa70 	bl	8000e9c <checkID>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <main+0x36>
		printf("Connection reussie\r\n");
 80019c2:	482b      	ldr	r0, [pc, #172]	@ (8001a70 <main+0xdc>)
 80019c4:	f003 f95c 	bl	8004c80 <puts>
 80019c8:	e002      	b.n	80019d0 <main+0x3c>
	} else {
		printf("Erreur lors de la connection du composant\r\n");
 80019ca:	482a      	ldr	r0, [pc, #168]	@ (8001a74 <main+0xe0>)
 80019cc:	f003 f958 	bl	8004c80 <puts>
	}

	// Début de configuration du composant avec gestion d'erreur

	if(BMP280_config()==0){
 80019d0:	f7ff fab2 	bl	8000f38 <BMP280_config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <main+0x4e>
		printf("Configuration reussie\r\n");
 80019da:	4827      	ldr	r0, [pc, #156]	@ (8001a78 <main+0xe4>)
 80019dc:	f003 f950 	bl	8004c80 <puts>
 80019e0:	e002      	b.n	80019e8 <main+0x54>

	} else {
		printf("Erreur lors de la configuration du composant\r\n");
 80019e2:	4826      	ldr	r0, [pc, #152]	@ (8001a7c <main+0xe8>)
 80019e4:	f003 f94c 	bl	8004c80 <puts>
	}

	BMP_etalonage();
 80019e8:	f7ff fb02 	bl	8000ff0 <BMP_etalonage>
  {
    /* USER CODE END WHILE */

	  double temp, pres;

	  temp = bmp280_compensate_T_double((uint32_t)BMP_get_temp());
 80019ec:	f7ff fbdc 	bl	80011a8 <BMP_get_temp>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fc6c 	bl	80012d0 <bmp280_compensate_T_double>
 80019f8:	ed87 0b04 	vstr	d0, [r7, #16]
	  pres = bmp280_compensate_P_double((uint32_t)BMP_get_pres());
 80019fc:	f7ff fc1e 	bl	800123c <BMP_get_pres>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fd30 	bl	8001468 <bmp280_compensate_P_double>
 8001a08:	ed87 0b02 	vstr	d0, [r7, #8]

	  int temp_int = (int)(temp);
 8001a0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a10:	f7ff f8a4 	bl	8000b5c <__aeabi_d2iz>
 8001a14:	4603      	mov	r3, r0
 8001a16:	603b      	str	r3, [r7, #0]
	  int pres_int = (int)(pres);
 8001a18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a1c:	f7ff f89e 	bl	8000b5c <__aeabi_d2iz>
 8001a20:	4603      	mov	r3, r0
 8001a22:	607b      	str	r3, [r7, #4]

	  printf("Temperature: %d C, Pressure: %d hPa\r\n", temp_int, pres_int);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4815      	ldr	r0, [pc, #84]	@ (8001a80 <main+0xec>)
 8001a2c:	f003 f8c0 	bl	8004bb0 <iprintf>

	  result = HAL_UART_Transmit(&huart1, (uint8_t*)&temp_int, sizeof(temp_int), HAL_MAX_DELAY);
 8001a30:	4639      	mov	r1, r7
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	2204      	movs	r2, #4
 8001a38:	4812      	ldr	r0, [pc, #72]	@ (8001a84 <main+0xf0>)
 8001a3a:	f002 fc3b 	bl	80042b4 <HAL_UART_Transmit>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <main+0xf4>)
 8001a44:	701a      	strb	r2, [r3, #0]

	  if (result == HAL_OK) {
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <main+0xf4>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <main+0xc6>
	      // Transfert réussi
	      printf("Transmission reussie : %d\r\n", temp_int);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	480e      	ldr	r0, [pc, #56]	@ (8001a8c <main+0xf8>)
 8001a54:	f003 f8ac 	bl	8004bb0 <iprintf>
 8001a58:	e002      	b.n	8001a60 <main+0xcc>
	  } else {
	      // Gestion de l'erreur
	      printf("Erreur de transmission\r\n");
 8001a5a:	480d      	ldr	r0, [pc, #52]	@ (8001a90 <main+0xfc>)
 8001a5c:	f003 f910 	bl	8004c80 <puts>
	  }

	  HAL_Delay(5000);
 8001a60:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001a64:	f000 fb06 	bl	8002074 <HAL_Delay>
  {
 8001a68:	e7c0      	b.n	80019ec <main+0x58>
 8001a6a:	bf00      	nop
 8001a6c:	08005ae4 	.word	0x08005ae4
 8001a70:	08005b00 	.word	0x08005b00
 8001a74:	08005b14 	.word	0x08005b14
 8001a78:	08005b40 	.word	0x08005b40
 8001a7c:	08005b58 	.word	0x08005b58
 8001a80:	08005b88 	.word	0x08005b88
 8001a84:	2000010c 	.word	0x2000010c
 8001a88:	20000104 	.word	0x20000104
 8001a8c:	08005bb0 	.word	0x08005bb0
 8001a90:	08005bcc 	.word	0x08005bcc

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b094      	sub	sp, #80	@ 0x50
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	2234      	movs	r2, #52	@ 0x34
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 f9cc 	bl	8004e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b70 <SystemClock_Config+0xdc>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b70 <SystemClock_Config+0xdc>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac8:	4b29      	ldr	r3, [pc, #164]	@ (8001b70 <SystemClock_Config+0xdc>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <SystemClock_Config+0xe0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a25      	ldr	r2, [pc, #148]	@ (8001b74 <SystemClock_Config+0xe0>)
 8001ade:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b23      	ldr	r3, [pc, #140]	@ (8001b74 <SystemClock_Config+0xe0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af0:	2301      	movs	r3, #1
 8001af2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001af8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afa:	2302      	movs	r3, #2
 8001afc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001afe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b04:	2304      	movs	r3, #4
 8001b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b08:	23b4      	movs	r3, #180	@ 0xb4
 8001b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f002 f8db 	bl	8003cd8 <HAL_RCC_OscConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b28:	f000 f826 	bl	8001b78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b2c:	f001 fd3a 	bl	80035a4 <HAL_PWREx_EnableOverDrive>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b36:	f000 f81f 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b46:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b50:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	2105      	movs	r1, #5
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fd73 	bl	8003644 <HAL_RCC_ClockConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001b64:	f000 f808 	bl	8001b78 <Error_Handler>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3750      	adds	r7, #80	@ 0x50
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40007000 	.word	0x40007000

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <Error_Handler+0x8>

08001b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b92:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	4a08      	ldr	r2, [pc, #32]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb6:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_MspInit+0x4c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bc2:	2007      	movs	r0, #7
 8001bc4:	f000 fb2c 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <NMI_Handler+0x4>

08001bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <MemManage_Handler+0x4>

08001bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2a:	f000 fa03 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e00a      	b.n	8001c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c44:	f3af 8000 	nop.w
 8001c48:	4601      	mov	r1, r0
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	60ba      	str	r2, [r7, #8]
 8001c50:	b2ca      	uxtb	r2, r1
 8001c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbf0      	blt.n	8001c44 <_read+0x12>
  }

  return len;
 8001c62:	687b      	ldr	r3, [r7, #4]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e009      	b.n	8001c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	60ba      	str	r2, [r7, #8]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fe72 	bl	8001970 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	dbf1      	blt.n	8001c7e <_write+0x12>
  }
  return len;
 8001c9a:	687b      	ldr	r3, [r7, #4]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_close>:

int _close(int file)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ccc:	605a      	str	r2, [r3, #4]
  return 0;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_isatty>:

int _isatty(int file)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce4:	2301      	movs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	@ (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	@ (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f003 f8ce 	bl	8004edc <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20020000 	.word	0x20020000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	20000108 	.word	0x20000108
 8001d74:	200002f0 	.word	0x200002f0

08001d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <SystemInit+0x20>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d82:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <SystemInit+0x20>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <MX_USART1_UART_Init+0x50>)
 8001da4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001da8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dd4:	f002 fa1e 	bl	8004214 <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dde:	f7ff fecb 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	2000010c 	.word	0x2000010c
 8001dec:	40011000 	.word	0x40011000

08001df0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	@ (8001e40 <MX_USART2_UART_Init+0x50>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e28:	f002 f9f4 	bl	8004214 <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e32:	f7ff fea1 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000154 	.word	0x20000154
 8001e40:	40004400 	.word	0x40004400

08001e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	@ 0x30
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a32      	ldr	r2, [pc, #200]	@ (8001f2c <HAL_UART_MspInit+0xe8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d12d      	bne.n	8001ec2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	4a30      	ldr	r2, [pc, #192]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001e70:	f043 0310 	orr.w	r3, r3, #16
 8001e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e76:	4b2e      	ldr	r3, [pc, #184]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	4b2a      	ldr	r3, [pc, #168]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a29      	ldr	r2, [pc, #164]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e9e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	481e      	ldr	r0, [pc, #120]	@ (8001f34 <HAL_UART_MspInit+0xf0>)
 8001ebc:	f000 f9e4 	bl	8002288 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ec0:	e030      	b.n	8001f24 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f38 <HAL_UART_MspInit+0xf4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d12b      	bne.n	8001f24 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	4a16      	ldr	r2, [pc, #88]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <HAL_UART_MspInit+0xec>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f04:	230c      	movs	r3, #12
 8001f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f14:	2307      	movs	r3, #7
 8001f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f107 031c 	add.w	r3, r7, #28
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <HAL_UART_MspInit+0xf0>)
 8001f20:	f000 f9b2 	bl	8002288 <HAL_GPIO_Init>
}
 8001f24:	bf00      	nop
 8001f26:	3730      	adds	r7, #48	@ 0x30
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40004400 	.word	0x40004400

08001f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f40:	f7ff ff1a 	bl	8001d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f44:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f46:	490d      	ldr	r1, [pc, #52]	@ (8001f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f48:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f002 ffbd 	bl	8004ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6e:	f7ff fd11 	bl	8001994 <main>
  bx  lr    
 8001f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f80:	08005c40 	.word	0x08005c40
  ldr r2, =_sbss
 8001f84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f88:	200002ec 	.word	0x200002ec

08001f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC_IRQHandler>
	...

08001f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f94:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd0 <HAL_Init+0x40>)
 8001f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd0 <HAL_Init+0x40>)
 8001fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	@ (8001fd0 <HAL_Init+0x40>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f000 f931 	bl	8002220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f808 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff fdde 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023c00 	.word	0x40023c00

08001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fdc:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <HAL_InitTick+0x54>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_InitTick+0x58>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f93b 	bl	800226e <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f000 f911 	bl	8002236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	@ (8002030 <HAL_InitTick+0x5c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000008 	.word	0x20000008
 800202c:	20000010 	.word	0x20000010
 8002030:	2000000c 	.word	0x2000000c

08002034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_IncTick+0x20>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_IncTick+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <HAL_IncTick+0x24>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000010 	.word	0x20000010
 8002058:	2000019c 	.word	0x2000019c

0800205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	2000019c 	.word	0x2000019c

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff ffee 	bl	800205c <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_Delay+0x44>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffde 	bl	800205c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000010 	.word	0x20000010

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	@ (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002130:	2b00      	cmp	r3, #0
 8002132:	db0a      	blt.n	800214a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	b2da      	uxtb	r2, r3
 8002138:	490c      	ldr	r1, [pc, #48]	@ (800216c <__NVIC_SetPriority+0x4c>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	0112      	lsls	r2, r2, #4
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	440b      	add	r3, r1
 8002144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002148:	e00a      	b.n	8002160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4908      	ldr	r1, [pc, #32]	@ (8002170 <__NVIC_SetPriority+0x50>)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	3b04      	subs	r3, #4
 8002158:	0112      	lsls	r2, r2, #4
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	440b      	add	r3, r1
 800215e:	761a      	strb	r2, [r3, #24]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000e100 	.word	0xe000e100
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f1c3 0307 	rsb	r3, r3, #7
 800218e:	2b04      	cmp	r3, #4
 8002190:	bf28      	it	cs
 8002192:	2304      	movcs	r3, #4
 8002194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3304      	adds	r3, #4
 800219a:	2b06      	cmp	r3, #6
 800219c:	d902      	bls.n	80021a4 <NVIC_EncodePriority+0x30>
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3b03      	subs	r3, #3
 80021a2:	e000      	b.n	80021a6 <NVIC_EncodePriority+0x32>
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	401a      	ands	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021bc:	f04f 31ff 	mov.w	r1, #4294967295
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	4313      	orrs	r3, r2
         );
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	@ 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ec:	d301      	bcc.n	80021f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00f      	b.n	8002212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f2:	4a0a      	ldr	r2, [pc, #40]	@ (800221c <SysTick_Config+0x40>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fa:	210f      	movs	r1, #15
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f7ff ff8e 	bl	8002120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <SysTick_Config+0x40>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	@ (800221c <SysTick_Config+0x40>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff47 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	60b9      	str	r1, [r7, #8]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002248:	f7ff ff5c 	bl	8002104 <__NVIC_GetPriorityGrouping>
 800224c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	6978      	ldr	r0, [r7, #20]
 8002254:	f7ff ff8e 	bl	8002174 <NVIC_EncodePriority>
 8002258:	4602      	mov	r2, r0
 800225a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff5d 	bl	8002120 <__NVIC_SetPriority>
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffb0 	bl	80021dc <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	e165      	b.n	8002570 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8154 	bne.w	800256a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d005      	beq.n	80022da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d130      	bne.n	800233c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002310:	2201      	movs	r2, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0201 	and.w	r2, r3, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b03      	cmp	r3, #3
 8002346:	d017      	beq.n	8002378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80ae 	beq.w	800256a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b5d      	ldr	r3, [pc, #372]	@ (8002588 <HAL_GPIO_Init+0x300>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	4a5c      	ldr	r2, [pc, #368]	@ (8002588 <HAL_GPIO_Init+0x300>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800241c:	6453      	str	r3, [r2, #68]	@ 0x44
 800241e:	4b5a      	ldr	r3, [pc, #360]	@ (8002588 <HAL_GPIO_Init+0x300>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242a:	4a58      	ldr	r2, [pc, #352]	@ (800258c <HAL_GPIO_Init+0x304>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4f      	ldr	r2, [pc, #316]	@ (8002590 <HAL_GPIO_Init+0x308>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d025      	beq.n	80024a2 <HAL_GPIO_Init+0x21a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4e      	ldr	r2, [pc, #312]	@ (8002594 <HAL_GPIO_Init+0x30c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01f      	beq.n	800249e <HAL_GPIO_Init+0x216>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4d      	ldr	r2, [pc, #308]	@ (8002598 <HAL_GPIO_Init+0x310>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x212>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4c      	ldr	r2, [pc, #304]	@ (800259c <HAL_GPIO_Init+0x314>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x20e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4b      	ldr	r2, [pc, #300]	@ (80025a0 <HAL_GPIO_Init+0x318>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x20a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4a      	ldr	r2, [pc, #296]	@ (80025a4 <HAL_GPIO_Init+0x31c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x206>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a49      	ldr	r2, [pc, #292]	@ (80025a8 <HAL_GPIO_Init+0x320>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x202>
 8002486:	2306      	movs	r3, #6
 8002488:	e00c      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800248a:	2307      	movs	r3, #7
 800248c:	e00a      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800248e:	2305      	movs	r3, #5
 8002490:	e008      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 8002492:	2304      	movs	r3, #4
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 8002496:	2303      	movs	r3, #3
 8002498:	e004      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800249a:	2302      	movs	r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x21c>
 80024a2:	2300      	movs	r3, #0
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	f002 0203 	and.w	r2, r2, #3
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	4093      	lsls	r3, r2
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b4:	4935      	ldr	r1, [pc, #212]	@ (800258c <HAL_GPIO_Init+0x304>)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c2:	4b3a      	ldr	r3, [pc, #232]	@ (80025ac <HAL_GPIO_Init+0x324>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e6:	4a31      	ldr	r2, [pc, #196]	@ (80025ac <HAL_GPIO_Init+0x324>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	@ (80025ac <HAL_GPIO_Init+0x324>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002510:	4a26      	ldr	r2, [pc, #152]	@ (80025ac <HAL_GPIO_Init+0x324>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002516:	4b25      	ldr	r3, [pc, #148]	@ (80025ac <HAL_GPIO_Init+0x324>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253a:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <HAL_GPIO_Init+0x324>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002540:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <HAL_GPIO_Init+0x324>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002564:	4a11      	ldr	r2, [pc, #68]	@ (80025ac <HAL_GPIO_Init+0x324>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	f67f ae96 	bls.w	80022a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3724      	adds	r7, #36	@ 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40013800 	.word	0x40013800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020400 	.word	0x40020400
 8002598:	40020800 	.word	0x40020800
 800259c:	40020c00 	.word	0x40020c00
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40021400 	.word	0x40021400
 80025a8:	40021800 	.word	0x40021800
 80025ac:	40013c00 	.word	0x40013c00

080025b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e12b      	b.n	800281a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff f982 	bl	80018e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	@ 0x24
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002602:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002612:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002614:	f001 f908 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8002618:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4a81      	ldr	r2, [pc, #516]	@ (8002824 <HAL_I2C_Init+0x274>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d807      	bhi.n	8002634 <HAL_I2C_Init+0x84>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a80      	ldr	r2, [pc, #512]	@ (8002828 <HAL_I2C_Init+0x278>)
 8002628:	4293      	cmp	r3, r2
 800262a:	bf94      	ite	ls
 800262c:	2301      	movls	r3, #1
 800262e:	2300      	movhi	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e006      	b.n	8002642 <HAL_I2C_Init+0x92>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a7d      	ldr	r2, [pc, #500]	@ (800282c <HAL_I2C_Init+0x27c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	bf94      	ite	ls
 800263c:	2301      	movls	r3, #1
 800263e:	2300      	movhi	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0e7      	b.n	800281a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4a78      	ldr	r2, [pc, #480]	@ (8002830 <HAL_I2C_Init+0x280>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0c9b      	lsrs	r3, r3, #18
 8002654:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	430a      	orrs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4a6a      	ldr	r2, [pc, #424]	@ (8002824 <HAL_I2C_Init+0x274>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d802      	bhi.n	8002684 <HAL_I2C_Init+0xd4>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	3301      	adds	r3, #1
 8002682:	e009      	b.n	8002698 <HAL_I2C_Init+0xe8>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	4a69      	ldr	r2, [pc, #420]	@ (8002834 <HAL_I2C_Init+0x284>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	3301      	adds	r3, #1
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	430b      	orrs	r3, r1
 800269e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	495c      	ldr	r1, [pc, #368]	@ (8002824 <HAL_I2C_Init+0x274>)
 80026b4:	428b      	cmp	r3, r1
 80026b6:	d819      	bhi.n	80026ec <HAL_I2C_Init+0x13c>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e59      	subs	r1, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c6:	1c59      	adds	r1, r3, #1
 80026c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026cc:	400b      	ands	r3, r1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_I2C_Init+0x138>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1e59      	subs	r1, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e6:	e051      	b.n	800278c <HAL_I2C_Init+0x1dc>
 80026e8:	2304      	movs	r3, #4
 80026ea:	e04f      	b.n	800278c <HAL_I2C_Init+0x1dc>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <HAL_I2C_Init+0x168>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e58      	subs	r0, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	440b      	add	r3, r1
 8002702:	fbb0 f3f3 	udiv	r3, r0, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	e012      	b.n	800273e <HAL_I2C_Init+0x18e>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e58      	subs	r0, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	0099      	lsls	r1, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	fbb0 f3f3 	udiv	r3, r0, r3
 800272e:	3301      	adds	r3, #1
 8002730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002734:	2b00      	cmp	r3, #0
 8002736:	bf0c      	ite	eq
 8002738:	2301      	moveq	r3, #1
 800273a:	2300      	movne	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Init+0x196>
 8002742:	2301      	movs	r3, #1
 8002744:	e022      	b.n	800278c <HAL_I2C_Init+0x1dc>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10e      	bne.n	800276c <HAL_I2C_Init+0x1bc>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1e58      	subs	r0, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	440b      	add	r3, r1
 800275c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002760:	3301      	adds	r3, #1
 8002762:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002766:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800276a:	e00f      	b.n	800278c <HAL_I2C_Init+0x1dc>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1e58      	subs	r0, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	0099      	lsls	r1, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002788:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	6809      	ldr	r1, [r1, #0]
 8002790:	4313      	orrs	r3, r2
 8002792:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6911      	ldr	r1, [r2, #16]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68d2      	ldr	r2, [r2, #12]
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	000186a0 	.word	0x000186a0
 8002828:	001e847f 	.word	0x001e847f
 800282c:	003d08ff 	.word	0x003d08ff
 8002830:	431bde83 	.word	0x431bde83
 8002834:	10624dd3 	.word	0x10624dd3

08002838 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	460b      	mov	r3, r1
 8002846:	817b      	strh	r3, [r7, #10]
 8002848:	4613      	mov	r3, r2
 800284a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff fc06 	bl	800205c <HAL_GetTick>
 8002850:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	f040 80e0 	bne.w	8002a20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2319      	movs	r3, #25
 8002866:	2201      	movs	r2, #1
 8002868:	4970      	ldr	r1, [pc, #448]	@ (8002a2c <HAL_I2C_Master_Transmit+0x1f4>)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fc64 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	e0d3      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_I2C_Master_Transmit+0x50>
 8002884:	2302      	movs	r3, #2
 8002886:	e0cc      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d007      	beq.n	80028ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	@ 0x21
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2210      	movs	r2, #16
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	893a      	ldrh	r2, [r7, #8]
 80028de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a50      	ldr	r2, [pc, #320]	@ (8002a30 <HAL_I2C_Master_Transmit+0x1f8>)
 80028ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028f0:	8979      	ldrh	r1, [r7, #10]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	6a3a      	ldr	r2, [r7, #32]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 face 	bl	8002e98 <I2C_MasterRequestWrite>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e08d      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800291c:	e066      	b.n	80029ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	6a39      	ldr	r1, [r7, #32]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fd22 	bl	800336c <I2C_WaitOnTXEFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2b04      	cmp	r3, #4
 8002934:	d107      	bne.n	8002946 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002944:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06b      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002972:	3b01      	subs	r3, #1
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d11b      	bne.n	80029c0 <HAL_I2C_Master_Transmit+0x188>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d017      	beq.n	80029c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	781a      	ldrb	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	6a39      	ldr	r1, [r7, #32]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fd19 	bl	80033fc <I2C_WaitOnBTFFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00d      	beq.n	80029ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d107      	bne.n	80029e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e01a      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d194      	bne.n	800291e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e000      	b.n	8002a22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	00100002 	.word	0x00100002
 8002a30:	ffff0000 	.word	0xffff0000

08002a34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	@ 0x30
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	817b      	strh	r3, [r7, #10]
 8002a44:	4613      	mov	r3, r2
 8002a46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff fb08 	bl	800205c <HAL_GetTick>
 8002a4c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	f040 8217 	bne.w	8002e8a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2319      	movs	r3, #25
 8002a62:	2201      	movs	r2, #1
 8002a64:	497c      	ldr	r1, [pc, #496]	@ (8002c58 <HAL_I2C_Master_Receive+0x224>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fb66 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
 8002a74:	e20a      	b.n	8002e8c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_I2C_Master_Receive+0x50>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e203      	b.n	8002e8c <HAL_I2C_Master_Receive+0x458>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d007      	beq.n	8002aaa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0201 	orr.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ab8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2222      	movs	r2, #34	@ 0x22
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	893a      	ldrh	r2, [r7, #8]
 8002ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a5c      	ldr	r2, [pc, #368]	@ (8002c5c <HAL_I2C_Master_Receive+0x228>)
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fa52 	bl	8002f9c <I2C_MasterRequestRead>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e1c4      	b.n	8002e8c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	623b      	str	r3, [r7, #32]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	623b      	str	r3, [r7, #32]
 8002b1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e198      	b.n	8002e64 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d11b      	bne.n	8002b72 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e178      	b.n	8002e64 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d11b      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	e158      	b.n	8002e64 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bd8:	e144      	b.n	8002e64 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	f200 80f1 	bhi.w	8002dc6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d123      	bne.n	8002c34 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fc4b 	bl	800348c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e145      	b.n	8002e8c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c32:	e117      	b.n	8002e64 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d14e      	bne.n	8002cda <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c42:	2200      	movs	r2, #0
 8002c44:	4906      	ldr	r1, [pc, #24]	@ (8002c60 <HAL_I2C_Master_Receive+0x22c>)
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa76 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e11a      	b.n	8002e8c <HAL_I2C_Master_Receive+0x458>
 8002c56:	bf00      	nop
 8002c58:	00100002 	.word	0x00100002
 8002c5c:	ffff0000 	.word	0xffff0000
 8002c60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cd8:	e0c4      	b.n	8002e64 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	496c      	ldr	r1, [pc, #432]	@ (8002e94 <HAL_I2C_Master_Receive+0x460>)
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fa27 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0cb      	b.n	8002e8c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4955      	ldr	r1, [pc, #340]	@ (8002e94 <HAL_I2C_Master_Receive+0x460>)
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f9f9 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e09d      	b.n	8002e8c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dc4:	e04e      	b.n	8002e64 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fb5e 	bl	800348c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e058      	b.n	8002e8c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d124      	bne.n	8002e64 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d107      	bne.n	8002e32 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e30:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f aeb6 	bne.w	8002bda <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
  }
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3728      	adds	r7, #40	@ 0x28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	00010004 	.word	0x00010004

08002e98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	603b      	str	r3, [r7, #0]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d006      	beq.n	8002ec2 <I2C_MasterRequestWrite+0x2a>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d003      	beq.n	8002ec2 <I2C_MasterRequestWrite+0x2a>
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ec0:	d108      	bne.n	8002ed4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	e00b      	b.n	8002eec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	2b12      	cmp	r3, #18
 8002eda:	d107      	bne.n	8002eec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f91d 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f12:	d103      	bne.n	8002f1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e035      	b.n	8002f8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f28:	d108      	bne.n	8002f3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f38:	611a      	str	r2, [r3, #16]
 8002f3a:	e01b      	b.n	8002f74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f3c:	897b      	ldrh	r3, [r7, #10]
 8002f3e:	11db      	asrs	r3, r3, #7
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 0306 	and.w	r3, r3, #6
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f063 030f 	orn	r3, r3, #15
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	490e      	ldr	r1, [pc, #56]	@ (8002f94 <I2C_MasterRequestWrite+0xfc>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f966 	bl	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e010      	b.n	8002f8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4907      	ldr	r1, [pc, #28]	@ (8002f98 <I2C_MasterRequestWrite+0x100>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f956 	bl	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	00010008 	.word	0x00010008
 8002f98:	00010002 	.word	0x00010002

08002f9c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fc0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d006      	beq.n	8002fd6 <I2C_MasterRequestRead+0x3a>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d003      	beq.n	8002fd6 <I2C_MasterRequestRead+0x3a>
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002fd4:	d108      	bne.n	8002fe8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e00b      	b.n	8003000 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	2b11      	cmp	r3, #17
 8002fee:	d107      	bne.n	8003000 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ffe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f893 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003026:	d103      	bne.n	8003030 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e079      	b.n	8003128 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800303c:	d108      	bne.n	8003050 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	b2da      	uxtb	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	611a      	str	r2, [r3, #16]
 800304e:	e05f      	b.n	8003110 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003050:	897b      	ldrh	r3, [r7, #10]
 8003052:	11db      	asrs	r3, r3, #7
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f003 0306 	and.w	r3, r3, #6
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f063 030f 	orn	r3, r3, #15
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4930      	ldr	r1, [pc, #192]	@ (8003130 <I2C_MasterRequestRead+0x194>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f8dc 	bl	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e054      	b.n	8003128 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800307e:	897b      	ldrh	r3, [r7, #10]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4929      	ldr	r1, [pc, #164]	@ (8003134 <I2C_MasterRequestRead+0x198>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f8cc 	bl	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e044      	b.n	8003128 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f831 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00d      	beq.n	80030f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ea:	d103      	bne.n	80030f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e017      	b.n	8003128 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80030f8:	897b      	ldrh	r3, [r7, #10]
 80030fa:	11db      	asrs	r3, r3, #7
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	f003 0306 	and.w	r3, r3, #6
 8003102:	b2db      	uxtb	r3, r3
 8003104:	f063 030e 	orn	r3, r3, #14
 8003108:	b2da      	uxtb	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4907      	ldr	r1, [pc, #28]	@ (8003134 <I2C_MasterRequestRead+0x198>)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f888 	bl	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	00010008 	.word	0x00010008
 8003134:	00010002 	.word	0x00010002

08003138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003148:	e048      	b.n	80031dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d044      	beq.n	80031dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003152:	f7fe ff83 	bl	800205c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d302      	bcc.n	8003168 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d139      	bne.n	80031dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10d      	bne.n	800318e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	43da      	mvns	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4013      	ands	r3, r2
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	e00c      	b.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	43da      	mvns	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	4013      	ands	r3, r2
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	461a      	mov	r2, r3
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d116      	bne.n	80031dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e023      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	0c1b      	lsrs	r3, r3, #16
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10d      	bne.n	8003202 <I2C_WaitOnFlagUntilTimeout+0xca>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	43da      	mvns	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4013      	ands	r3, r2
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	e00c      	b.n	800321c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	43da      	mvns	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4013      	ands	r3, r2
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	429a      	cmp	r2, r3
 8003220:	d093      	beq.n	800314a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800323a:	e071      	b.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800324a:	d123      	bne.n	8003294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003264:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f043 0204 	orr.w	r2, r3, #4
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e067      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d041      	beq.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329c:	f7fe fede 	bl	800205c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d302      	bcc.n	80032b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d136      	bne.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d10c      	bne.n	80032d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	43da      	mvns	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4013      	ands	r3, r2
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	bf14      	ite	ne
 80032ce:	2301      	movne	r3, #1
 80032d0:	2300      	moveq	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e00b      	b.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	43da      	mvns	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e021      	b.n	8003364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	0c1b      	lsrs	r3, r3, #16
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b01      	cmp	r3, #1
 8003328:	d10c      	bne.n	8003344 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	43da      	mvns	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4013      	ands	r3, r2
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e00b      	b.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f af6d 	bne.w	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003378:	e034      	b.n	80033e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f8e3 	bl	8003546 <I2C_IsAcknowledgeFailed>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e034      	b.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d028      	beq.n	80033e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003392:	f7fe fe63 	bl	800205c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d302      	bcc.n	80033a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d11d      	bne.n	80033e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b2:	2b80      	cmp	r3, #128	@ 0x80
 80033b4:	d016      	beq.n	80033e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e007      	b.n	80033f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ee:	2b80      	cmp	r3, #128	@ 0x80
 80033f0:	d1c3      	bne.n	800337a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003408:	e034      	b.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f89b 	bl	8003546 <I2C_IsAcknowledgeFailed>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e034      	b.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d028      	beq.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003422:	f7fe fe1b 	bl	800205c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d11d      	bne.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b04      	cmp	r3, #4
 8003444:	d016      	beq.n	8003474 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e007      	b.n	8003484 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b04      	cmp	r3, #4
 8003480:	d1c3      	bne.n	800340a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003498:	e049      	b.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d119      	bne.n	80034dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0210 	mvn.w	r2, #16
 80034b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e030      	b.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034dc:	f7fe fdbe 	bl	800205c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d302      	bcc.n	80034f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d11d      	bne.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fc:	2b40      	cmp	r3, #64	@ 0x40
 80034fe:	d016      	beq.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e007      	b.n	800353e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d1ae      	bne.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355c:	d11b      	bne.n	8003596 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003566:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	f043 0204 	orr.w	r2, r3, #4
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	4b20      	ldr	r3, [pc, #128]	@ (8003634 <HAL_PWREx_EnableOverDrive+0x90>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003634 <HAL_PWREx_EnableOverDrive+0x90>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035be:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <HAL_PWREx_EnableOverDrive+0x90>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003638 <HAL_PWREx_EnableOverDrive+0x94>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035d0:	f7fe fd44 	bl	800205c <HAL_GetTick>
 80035d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035d6:	e009      	b.n	80035ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035d8:	f7fe fd40 	bl	800205c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035e6:	d901      	bls.n	80035ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e01f      	b.n	800362c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035ec:	4b13      	ldr	r3, [pc, #76]	@ (800363c <HAL_PWREx_EnableOverDrive+0x98>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f8:	d1ee      	bne.n	80035d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80035fa:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003600:	f7fe fd2c 	bl	800205c <HAL_GetTick>
 8003604:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003606:	e009      	b.n	800361c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003608:	f7fe fd28 	bl	800205c <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003616:	d901      	bls.n	800361c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e007      	b.n	800362c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800361c:	4b07      	ldr	r3, [pc, #28]	@ (800363c <HAL_PWREx_EnableOverDrive+0x98>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003628:	d1ee      	bne.n	8003608 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40023800 	.word	0x40023800
 8003638:	420e0040 	.word	0x420e0040
 800363c:	40007000 	.word	0x40007000
 8003640:	420e0044 	.word	0x420e0044

08003644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0cc      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003658:	4b68      	ldr	r3, [pc, #416]	@ (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d90c      	bls.n	8003680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b65      	ldr	r3, [pc, #404]	@ (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b63      	ldr	r3, [pc, #396]	@ (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0b8      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003698:	4b59      	ldr	r3, [pc, #356]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a58      	ldr	r2, [pc, #352]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036b0:	4b53      	ldr	r3, [pc, #332]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a52      	ldr	r2, [pc, #328]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036bc:	4b50      	ldr	r3, [pc, #320]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	494d      	ldr	r1, [pc, #308]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d044      	beq.n	8003764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d107      	bne.n	80036f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e2:	4b47      	ldr	r3, [pc, #284]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d119      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e07f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d107      	bne.n	8003712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003702:	4b3f      	ldr	r3, [pc, #252]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e06f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003712:	4b3b      	ldr	r3, [pc, #236]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e067      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003722:	4b37      	ldr	r3, [pc, #220]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f023 0203 	bic.w	r2, r3, #3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4934      	ldr	r1, [pc, #208]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	4313      	orrs	r3, r2
 8003732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003734:	f7fe fc92 	bl	800205c <HAL_GetTick>
 8003738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	e00a      	b.n	8003752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800373c:	f7fe fc8e 	bl	800205c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e04f      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003752:	4b2b      	ldr	r3, [pc, #172]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 020c 	and.w	r2, r3, #12
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	429a      	cmp	r2, r3
 8003762:	d1eb      	bne.n	800373c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003764:	4b25      	ldr	r3, [pc, #148]	@ (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d20c      	bcs.n	800378c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003772:	4b22      	ldr	r3, [pc, #136]	@ (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	4b20      	ldr	r3, [pc, #128]	@ (80037fc <HAL_RCC_ClockConfig+0x1b8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d001      	beq.n	800378c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e032      	b.n	80037f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003798:	4b19      	ldr	r3, [pc, #100]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4916      	ldr	r1, [pc, #88]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037b6:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	490e      	ldr	r1, [pc, #56]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ca:	f000 f855 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 80037ce:	4602      	mov	r2, r0
 80037d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	490a      	ldr	r1, [pc, #40]	@ (8003804 <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	5ccb      	ldrb	r3, [r1, r3]
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	4a09      	ldr	r2, [pc, #36]	@ (8003808 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037e6:	4b09      	ldr	r3, [pc, #36]	@ (800380c <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe fbf2 	bl	8001fd4 <HAL_InitTick>

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40023c00 	.word	0x40023c00
 8003800:	40023800 	.word	0x40023800
 8003804:	08005be4 	.word	0x08005be4
 8003808:	20000008 	.word	0x20000008
 800380c:	2000000c 	.word	0x2000000c

08003810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b03      	ldr	r3, [pc, #12]	@ (8003824 <HAL_RCC_GetHCLKFreq+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000008 	.word	0x20000008

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800382c:	f7ff fff0 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a9b      	lsrs	r3, r3, #10
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4903      	ldr	r1, [pc, #12]	@ (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40023800 	.word	0x40023800
 800384c:	08005bf4 	.word	0x08005bf4

08003850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003854:	f7ff ffdc 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0b5b      	lsrs	r3, r3, #13
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4903      	ldr	r1, [pc, #12]	@ (8003874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08005bf4 	.word	0x08005bf4

08003878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800387c:	b0ae      	sub	sp, #184	@ 0xb8
 800387e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800389e:	4bcb      	ldr	r3, [pc, #812]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x354>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	f200 8206 	bhi.w	8003cb8 <HAL_RCC_GetSysClockFreq+0x440>
 80038ac:	a201      	add	r2, pc, #4	@ (adr r2, 80038b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038e9 	.word	0x080038e9
 80038b8:	08003cb9 	.word	0x08003cb9
 80038bc:	08003cb9 	.word	0x08003cb9
 80038c0:	08003cb9 	.word	0x08003cb9
 80038c4:	080038f1 	.word	0x080038f1
 80038c8:	08003cb9 	.word	0x08003cb9
 80038cc:	08003cb9 	.word	0x08003cb9
 80038d0:	08003cb9 	.word	0x08003cb9
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	08003cb9 	.word	0x08003cb9
 80038dc:	08003cb9 	.word	0x08003cb9
 80038e0:	08003cb9 	.word	0x08003cb9
 80038e4:	08003ae9 	.word	0x08003ae9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038e8:	4bb9      	ldr	r3, [pc, #740]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x358>)
 80038ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038ee:	e1e7      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f0:	4bb8      	ldr	r3, [pc, #736]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80038f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038f6:	e1e3      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038f8:	4bb4      	ldr	r3, [pc, #720]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x354>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003900:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003904:	4bb1      	ldr	r3, [pc, #708]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x354>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d071      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003910:	4bae      	ldr	r3, [pc, #696]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x354>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	099b      	lsrs	r3, r3, #6
 8003916:	2200      	movs	r2, #0
 8003918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800391c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003920:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003928:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800392c:	2300      	movs	r3, #0
 800392e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003932:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003936:	4622      	mov	r2, r4
 8003938:	462b      	mov	r3, r5
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	0159      	lsls	r1, r3, #5
 8003944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003948:	0150      	lsls	r0, r2, #5
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4621      	mov	r1, r4
 8003950:	1a51      	subs	r1, r2, r1
 8003952:	6439      	str	r1, [r7, #64]	@ 0x40
 8003954:	4629      	mov	r1, r5
 8003956:	eb63 0301 	sbc.w	r3, r3, r1
 800395a:	647b      	str	r3, [r7, #68]	@ 0x44
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003968:	4649      	mov	r1, r9
 800396a:	018b      	lsls	r3, r1, #6
 800396c:	4641      	mov	r1, r8
 800396e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003972:	4641      	mov	r1, r8
 8003974:	018a      	lsls	r2, r1, #6
 8003976:	4641      	mov	r1, r8
 8003978:	1a51      	subs	r1, r2, r1
 800397a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800397c:	4649      	mov	r1, r9
 800397e:	eb63 0301 	sbc.w	r3, r3, r1
 8003982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003990:	4649      	mov	r1, r9
 8003992:	00cb      	lsls	r3, r1, #3
 8003994:	4641      	mov	r1, r8
 8003996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800399a:	4641      	mov	r1, r8
 800399c:	00ca      	lsls	r2, r1, #3
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	4603      	mov	r3, r0
 80039a4:	4622      	mov	r2, r4
 80039a6:	189b      	adds	r3, r3, r2
 80039a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039aa:	462b      	mov	r3, r5
 80039ac:	460a      	mov	r2, r1
 80039ae:	eb42 0303 	adc.w	r3, r2, r3
 80039b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039c0:	4629      	mov	r1, r5
 80039c2:	024b      	lsls	r3, r1, #9
 80039c4:	4621      	mov	r1, r4
 80039c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039ca:	4621      	mov	r1, r4
 80039cc:	024a      	lsls	r2, r1, #9
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039d6:	2200      	movs	r2, #0
 80039d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80039e4:	f7fd f8e2 	bl	8000bac <__aeabi_uldivmod>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4613      	mov	r3, r2
 80039ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f2:	e067      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f4:	4b75      	ldr	r3, [pc, #468]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x354>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	099b      	lsrs	r3, r3, #6
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a00:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a0e:	2300      	movs	r3, #0
 8003a10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003a16:	4622      	mov	r2, r4
 8003a18:	462b      	mov	r3, r5
 8003a1a:	f04f 0000 	mov.w	r0, #0
 8003a1e:	f04f 0100 	mov.w	r1, #0
 8003a22:	0159      	lsls	r1, r3, #5
 8003a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a28:	0150      	lsls	r0, r2, #5
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4621      	mov	r1, r4
 8003a30:	1a51      	subs	r1, r2, r1
 8003a32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a34:	4629      	mov	r1, r5
 8003a36:	eb63 0301 	sbc.w	r3, r3, r1
 8003a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003a48:	4649      	mov	r1, r9
 8003a4a:	018b      	lsls	r3, r1, #6
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a52:	4641      	mov	r1, r8
 8003a54:	018a      	lsls	r2, r1, #6
 8003a56:	4641      	mov	r1, r8
 8003a58:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a76:	4692      	mov	sl, r2
 8003a78:	469b      	mov	fp, r3
 8003a7a:	4623      	mov	r3, r4
 8003a7c:	eb1a 0303 	adds.w	r3, sl, r3
 8003a80:	623b      	str	r3, [r7, #32]
 8003a82:	462b      	mov	r3, r5
 8003a84:	eb4b 0303 	adc.w	r3, fp, r3
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a96:	4629      	mov	r1, r5
 8003a98:	028b      	lsls	r3, r1, #10
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	028a      	lsls	r2, r1, #10
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003aac:	2200      	movs	r2, #0
 8003aae:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ab0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ab2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003ab6:	f7fd f879 	bl	8000bac <__aeabi_uldivmod>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4613      	mov	r3, r2
 8003ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ac4:	4b41      	ldr	r3, [pc, #260]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x354>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003ad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ada:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ae6:	e0eb      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae8:	4b38      	ldr	r3, [pc, #224]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x354>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003af0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af4:	4b35      	ldr	r3, [pc, #212]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x354>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d06b      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b00:	4b32      	ldr	r3, [pc, #200]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x354>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	099b      	lsrs	r3, r3, #6
 8003b06:	2200      	movs	r2, #0
 8003b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b14:	2300      	movs	r3, #0
 8003b16:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	462b      	mov	r3, r5
 8003b20:	f04f 0000 	mov.w	r0, #0
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	0159      	lsls	r1, r3, #5
 8003b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b2e:	0150      	lsls	r0, r2, #5
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4621      	mov	r1, r4
 8003b36:	1a51      	subs	r1, r2, r1
 8003b38:	61b9      	str	r1, [r7, #24]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	eb63 0301 	sbc.w	r3, r3, r1
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b4e:	4659      	mov	r1, fp
 8003b50:	018b      	lsls	r3, r1, #6
 8003b52:	4651      	mov	r1, sl
 8003b54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b58:	4651      	mov	r1, sl
 8003b5a:	018a      	lsls	r2, r1, #6
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	ebb2 0801 	subs.w	r8, r2, r1
 8003b62:	4659      	mov	r1, fp
 8003b64:	eb63 0901 	sbc.w	r9, r3, r1
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b7c:	4690      	mov	r8, r2
 8003b7e:	4699      	mov	r9, r3
 8003b80:	4623      	mov	r3, r4
 8003b82:	eb18 0303 	adds.w	r3, r8, r3
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	462b      	mov	r3, r5
 8003b8a:	eb49 0303 	adc.w	r3, r9, r3
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	024b      	lsls	r3, r1, #9
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	024a      	lsls	r2, r1, #9
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bb6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003bb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bbc:	f7fc fff6 	bl	8000bac <__aeabi_uldivmod>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bca:	e065      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x420>
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	099b      	lsrs	r3, r3, #6
 8003bde:	2200      	movs	r2, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	4611      	mov	r1, r2
 8003be4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003be8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bea:	2300      	movs	r3, #0
 8003bec:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003bf2:	4642      	mov	r2, r8
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	f04f 0000 	mov.w	r0, #0
 8003bfa:	f04f 0100 	mov.w	r1, #0
 8003bfe:	0159      	lsls	r1, r3, #5
 8003c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c04:	0150      	lsls	r0, r2, #5
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4641      	mov	r1, r8
 8003c0c:	1a51      	subs	r1, r2, r1
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	4649      	mov	r1, r9
 8003c12:	eb63 0301 	sbc.w	r3, r3, r1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c24:	4659      	mov	r1, fp
 8003c26:	018b      	lsls	r3, r1, #6
 8003c28:	4651      	mov	r1, sl
 8003c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c2e:	4651      	mov	r1, sl
 8003c30:	018a      	lsls	r2, r1, #6
 8003c32:	4651      	mov	r1, sl
 8003c34:	1a54      	subs	r4, r2, r1
 8003c36:	4659      	mov	r1, fp
 8003c38:	eb63 0501 	sbc.w	r5, r3, r1
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	00eb      	lsls	r3, r5, #3
 8003c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c4a:	00e2      	lsls	r2, r4, #3
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	461d      	mov	r5, r3
 8003c50:	4643      	mov	r3, r8
 8003c52:	18e3      	adds	r3, r4, r3
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	464b      	mov	r3, r9
 8003c58:	eb45 0303 	adc.w	r3, r5, r3
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	028b      	lsls	r3, r1, #10
 8003c6e:	4621      	mov	r1, r4
 8003c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c74:	4621      	mov	r1, r4
 8003c76:	028a      	lsls	r2, r1, #10
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c80:	2200      	movs	r2, #0
 8003c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c84:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c8a:	f7fc ff8f 	bl	8000bac <__aeabi_uldivmod>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4613      	mov	r3, r2
 8003c94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c98:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	0f1b      	lsrs	r3, r3, #28
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003caa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cb6:	e003      	b.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003cbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	37b8      	adds	r7, #184	@ 0xb8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	00f42400 	.word	0x00f42400

08003cd8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e28d      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8083 	beq.w	8003dfe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cf8:	4b94      	ldr	r3, [pc, #592]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d019      	beq.n	8003d38 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d04:	4b91      	ldr	r3, [pc, #580]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d10:	4b8e      	ldr	r3, [pc, #568]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d1c:	d00c      	beq.n	8003d38 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	d112      	bne.n	8003d50 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2a:	4b88      	ldr	r3, [pc, #544]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d36:	d10b      	bne.n	8003d50 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	4b84      	ldr	r3, [pc, #528]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d05b      	beq.n	8003dfc <HAL_RCC_OscConfig+0x124>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d157      	bne.n	8003dfc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e25a      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_OscConfig+0x90>
 8003d5a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7b      	ldr	r2, [pc, #492]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e01d      	b.n	8003da4 <HAL_RCC_OscConfig+0xcc>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0xb4>
 8003d72:	4b76      	ldr	r3, [pc, #472]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a75      	ldr	r2, [pc, #468]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	4b73      	ldr	r3, [pc, #460]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a72      	ldr	r2, [pc, #456]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0xcc>
 8003d8c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6e      	ldr	r2, [pc, #440]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b6c      	ldr	r3, [pc, #432]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a6b      	ldr	r2, [pc, #428]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d013      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe f956 	bl	800205c <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db4:	f7fe f952 	bl	800205c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	@ 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e21f      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	4b61      	ldr	r3, [pc, #388]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0xdc>
 8003dd2:	e014      	b.n	8003dfe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fe f942 	bl	800205c <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe f93e 	bl	800205c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	@ 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e20b      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	4b57      	ldr	r3, [pc, #348]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x104>
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d06f      	beq.n	8003eea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e0a:	4b50      	ldr	r3, [pc, #320]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d017      	beq.n	8003e46 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e16:	4b4d      	ldr	r3, [pc, #308]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d105      	bne.n	8003e2e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e22:	4b4a      	ldr	r3, [pc, #296]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2e:	4b47      	ldr	r3, [pc, #284]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d11c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b44      	ldr	r3, [pc, #272]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e46:	4b41      	ldr	r3, [pc, #260]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_RCC_OscConfig+0x186>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d001      	beq.n	8003e5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e1d3      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4937      	ldr	r1, [pc, #220]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e72:	e03a      	b.n	8003eea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d020      	beq.n	8003ebe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7c:	4b34      	ldr	r3, [pc, #208]	@ (8003f50 <HAL_RCC_OscConfig+0x278>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fe f8eb 	bl	800205c <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8a:	f7fe f8e7 	bl	800205c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1b4      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea8:	4b28      	ldr	r3, [pc, #160]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4925      	ldr	r1, [pc, #148]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	e015      	b.n	8003eea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebe:	4b24      	ldr	r3, [pc, #144]	@ (8003f50 <HAL_RCC_OscConfig+0x278>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f8ca 	bl	800205c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fe f8c6 	bl	800205c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e193      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ede:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d036      	beq.n	8003f64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efe:	4b15      	ldr	r3, [pc, #84]	@ (8003f54 <HAL_RCC_OscConfig+0x27c>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fe f8aa 	bl	800205c <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fe f8a6 	bl	800205c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e173      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x234>
 8003f2a:	e01b      	b.n	8003f64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f32:	f7fe f893 	bl	800205c <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	e00e      	b.n	8003f58 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3a:	f7fe f88f 	bl	800205c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d907      	bls.n	8003f58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e15c      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	42470000 	.word	0x42470000
 8003f54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	4b8a      	ldr	r3, [pc, #552]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ea      	bne.n	8003f3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 8097 	beq.w	80040a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f76:	4b83      	ldr	r3, [pc, #524]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	4b7f      	ldr	r3, [pc, #508]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f92:	4b7c      	ldr	r3, [pc, #496]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	4b79      	ldr	r3, [pc, #484]	@ (8004188 <HAL_RCC_OscConfig+0x4b0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d118      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fae:	4b76      	ldr	r3, [pc, #472]	@ (8004188 <HAL_RCC_OscConfig+0x4b0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a75      	ldr	r2, [pc, #468]	@ (8004188 <HAL_RCC_OscConfig+0x4b0>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fba:	f7fe f84f 	bl	800205c <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc2:	f7fe f84b 	bl	800205c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e118      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	4b6c      	ldr	r3, [pc, #432]	@ (8004188 <HAL_RCC_OscConfig+0x4b0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x31e>
 8003fe8:	4b66      	ldr	r3, [pc, #408]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fec:	4a65      	ldr	r2, [pc, #404]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff4:	e01c      	b.n	8004030 <HAL_RCC_OscConfig+0x358>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x340>
 8003ffe:	4b61      	ldr	r3, [pc, #388]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004002:	4a60      	ldr	r2, [pc, #384]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004004:	f043 0304 	orr.w	r3, r3, #4
 8004008:	6713      	str	r3, [r2, #112]	@ 0x70
 800400a:	4b5e      	ldr	r3, [pc, #376]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	4a5d      	ldr	r2, [pc, #372]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6713      	str	r3, [r2, #112]	@ 0x70
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0x358>
 8004018:	4b5a      	ldr	r3, [pc, #360]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401c:	4a59      	ldr	r2, [pc, #356]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	@ 0x70
 8004024:	4b57      	ldr	r3, [pc, #348]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004028:	4a56      	ldr	r2, [pc, #344]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800402a:	f023 0304 	bic.w	r3, r3, #4
 800402e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d015      	beq.n	8004064 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fe f810 	bl	800205c <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403e:	e00a      	b.n	8004056 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fe f80c 	bl	800205c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e0d7      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004056:	4b4b      	ldr	r3, [pc, #300]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ee      	beq.n	8004040 <HAL_RCC_OscConfig+0x368>
 8004062:	e014      	b.n	800408e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd fffa 	bl	800205c <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fd fff6 	bl	800205c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e0c1      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004082:	4b40      	ldr	r3, [pc, #256]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ee      	bne.n	800406c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800408e:	7dfb      	ldrb	r3, [r7, #23]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b3b      	ldr	r3, [pc, #236]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	4a3a      	ldr	r2, [pc, #232]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800409e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80ad 	beq.w	8004204 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040aa:	4b36      	ldr	r3, [pc, #216]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d060      	beq.n	8004178 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d145      	bne.n	800414a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040be:	4b33      	ldr	r3, [pc, #204]	@ (800418c <HAL_RCC_OscConfig+0x4b4>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd ffca 	bl	800205c <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fd ffc6 	bl	800205c <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e093      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040de:	4b29      	ldr	r3, [pc, #164]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69da      	ldr	r2, [r3, #28]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f8:	019b      	lsls	r3, r3, #6
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	3b01      	subs	r3, #1
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	061b      	lsls	r3, r3, #24
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	071b      	lsls	r3, r3, #28
 8004116:	491b      	ldr	r1, [pc, #108]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411c:	4b1b      	ldr	r3, [pc, #108]	@ (800418c <HAL_RCC_OscConfig+0x4b4>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004122:	f7fd ff9b 	bl	800205c <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412a:	f7fd ff97 	bl	800205c <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e064      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413c:	4b11      	ldr	r3, [pc, #68]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x452>
 8004148:	e05c      	b.n	8004204 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414a:	4b10      	ldr	r3, [pc, #64]	@ (800418c <HAL_RCC_OscConfig+0x4b4>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fd ff84 	bl	800205c <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fd ff80 	bl	800205c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e04d      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <HAL_RCC_OscConfig+0x4ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x480>
 8004176:	e045      	b.n	8004204 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d107      	bne.n	8004190 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e040      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
 8004184:	40023800 	.word	0x40023800
 8004188:	40007000 	.word	0x40007000
 800418c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004190:	4b1f      	ldr	r3, [pc, #124]	@ (8004210 <HAL_RCC_OscConfig+0x538>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d030      	beq.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d129      	bne.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d122      	bne.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041c0:	4013      	ands	r3, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d119      	bne.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d6:	085b      	lsrs	r3, r3, #1
 80041d8:	3b01      	subs	r3, #1
 80041da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d10f      	bne.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d107      	bne.n	8004200 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800

08004214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e042      	b.n	80042ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fd fe02 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	@ 0x24
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f973 	bl	8004544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800426c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695a      	ldr	r2, [r3, #20]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800427c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800428c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08a      	sub	sp, #40	@ 0x28
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d175      	bne.n	80043c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_UART_Transmit+0x2c>
 80042da:	88fb      	ldrh	r3, [r7, #6]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e06e      	b.n	80043c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2221      	movs	r2, #33	@ 0x21
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042f2:	f7fd feb3 	bl	800205c <HAL_GetTick>
 80042f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	88fa      	ldrh	r2, [r7, #6]
 80042fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	88fa      	ldrh	r2, [r7, #6]
 8004302:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430c:	d108      	bne.n	8004320 <HAL_UART_Transmit+0x6c>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d104      	bne.n	8004320 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	e003      	b.n	8004328 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004328:	e02e      	b.n	8004388 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2200      	movs	r2, #0
 8004332:	2180      	movs	r1, #128	@ 0x80
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f848 	bl	80043ca <UART_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e03a      	b.n	80043c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004360:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	3302      	adds	r3, #2
 8004366:	61bb      	str	r3, [r7, #24]
 8004368:	e007      	b.n	800437a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	781a      	ldrb	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	3301      	adds	r3, #1
 8004378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1cb      	bne.n	800432a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	2140      	movs	r1, #64	@ 0x40
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f814 	bl	80043ca <UART_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e006      	b.n	80043c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e000      	b.n	80043c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	603b      	str	r3, [r7, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043da:	e03b      	b.n	8004454 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e2:	d037      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e4:	f7fd fe3a 	bl	800205c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	6a3a      	ldr	r2, [r7, #32]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d302      	bcc.n	80043fa <UART_WaitOnFlagUntilTimeout+0x30>
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e03a      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	d023      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x8a>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b80      	cmp	r3, #128	@ 0x80
 8004410:	d020      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b40      	cmp	r3, #64	@ 0x40
 8004416:	d01d      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b08      	cmp	r3, #8
 8004424:	d116      	bne.n	8004454 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f81d 	bl	800447c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2208      	movs	r2, #8
 8004446:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e00f      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4013      	ands	r3, r2
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	429a      	cmp	r2, r3
 8004470:	d0b4      	beq.n	80043dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b095      	sub	sp, #84	@ 0x54
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	330c      	adds	r3, #12
 800448a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004496:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800449a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80044a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e5      	bne.n	8004484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3314      	adds	r3, #20
 80044be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3314      	adds	r3, #20
 80044d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e5      	bne.n	80044b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d119      	bne.n	8004528 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	60bb      	str	r3, [r7, #8]
   return(result);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0310 	bic.w	r3, r3, #16
 800450a:	647b      	str	r3, [r7, #68]	@ 0x44
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004514:	61ba      	str	r2, [r7, #24]
 8004516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6979      	ldr	r1, [r7, #20]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	613b      	str	r3, [r7, #16]
   return(result);
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e5      	bne.n	80044f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004536:	bf00      	nop
 8004538:	3754      	adds	r7, #84	@ 0x54
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004548:	b0c0      	sub	sp, #256	@ 0x100
 800454a:	af00      	add	r7, sp, #0
 800454c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	68d9      	ldr	r1, [r3, #12]
 8004562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	ea40 0301 	orr.w	r3, r0, r1
 800456c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800456e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	431a      	orrs	r2, r3
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	431a      	orrs	r2, r3
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800459c:	f021 010c 	bic.w	r1, r1, #12
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80045aa:	430b      	orrs	r3, r1
 80045ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045be:	6999      	ldr	r1, [r3, #24]
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	ea40 0301 	orr.w	r3, r0, r1
 80045ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004810 <UART_SetConfig+0x2cc>)
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d005      	beq.n	80045e4 <UART_SetConfig+0xa0>
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b8d      	ldr	r3, [pc, #564]	@ (8004814 <UART_SetConfig+0x2d0>)
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d104      	bne.n	80045ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045e4:	f7ff f934 	bl	8003850 <HAL_RCC_GetPCLK2Freq>
 80045e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80045ec:	e003      	b.n	80045f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045ee:	f7ff f91b 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 80045f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004600:	f040 810c 	bne.w	800481c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004608:	2200      	movs	r2, #0
 800460a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800460e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004612:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004616:	4622      	mov	r2, r4
 8004618:	462b      	mov	r3, r5
 800461a:	1891      	adds	r1, r2, r2
 800461c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800461e:	415b      	adcs	r3, r3
 8004620:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004622:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004626:	4621      	mov	r1, r4
 8004628:	eb12 0801 	adds.w	r8, r2, r1
 800462c:	4629      	mov	r1, r5
 800462e:	eb43 0901 	adc.w	r9, r3, r1
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800463e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004646:	4690      	mov	r8, r2
 8004648:	4699      	mov	r9, r3
 800464a:	4623      	mov	r3, r4
 800464c:	eb18 0303 	adds.w	r3, r8, r3
 8004650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004654:	462b      	mov	r3, r5
 8004656:	eb49 0303 	adc.w	r3, r9, r3
 800465a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800466a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800466e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004672:	460b      	mov	r3, r1
 8004674:	18db      	adds	r3, r3, r3
 8004676:	653b      	str	r3, [r7, #80]	@ 0x50
 8004678:	4613      	mov	r3, r2
 800467a:	eb42 0303 	adc.w	r3, r2, r3
 800467e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004680:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004684:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004688:	f7fc fa90 	bl	8000bac <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4b61      	ldr	r3, [pc, #388]	@ (8004818 <UART_SetConfig+0x2d4>)
 8004692:	fba3 2302 	umull	r2, r3, r3, r2
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	011c      	lsls	r4, r3, #4
 800469a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80046a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80046ac:	4642      	mov	r2, r8
 80046ae:	464b      	mov	r3, r9
 80046b0:	1891      	adds	r1, r2, r2
 80046b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80046b4:	415b      	adcs	r3, r3
 80046b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046bc:	4641      	mov	r1, r8
 80046be:	eb12 0a01 	adds.w	sl, r2, r1
 80046c2:	4649      	mov	r1, r9
 80046c4:	eb43 0b01 	adc.w	fp, r3, r1
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046dc:	4692      	mov	sl, r2
 80046de:	469b      	mov	fp, r3
 80046e0:	4643      	mov	r3, r8
 80046e2:	eb1a 0303 	adds.w	r3, sl, r3
 80046e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046ea:	464b      	mov	r3, r9
 80046ec:	eb4b 0303 	adc.w	r3, fp, r3
 80046f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004700:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004704:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004708:	460b      	mov	r3, r1
 800470a:	18db      	adds	r3, r3, r3
 800470c:	643b      	str	r3, [r7, #64]	@ 0x40
 800470e:	4613      	mov	r3, r2
 8004710:	eb42 0303 	adc.w	r3, r2, r3
 8004714:	647b      	str	r3, [r7, #68]	@ 0x44
 8004716:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800471a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800471e:	f7fc fa45 	bl	8000bac <__aeabi_uldivmod>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4611      	mov	r1, r2
 8004728:	4b3b      	ldr	r3, [pc, #236]	@ (8004818 <UART_SetConfig+0x2d4>)
 800472a:	fba3 2301 	umull	r2, r3, r3, r1
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2264      	movs	r2, #100	@ 0x64
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	1acb      	subs	r3, r1, r3
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800473e:	4b36      	ldr	r3, [pc, #216]	@ (8004818 <UART_SetConfig+0x2d4>)
 8004740:	fba3 2302 	umull	r2, r3, r3, r2
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800474c:	441c      	add	r4, r3
 800474e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004758:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800475c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	1891      	adds	r1, r2, r2
 8004766:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004768:	415b      	adcs	r3, r3
 800476a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800476c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004770:	4641      	mov	r1, r8
 8004772:	1851      	adds	r1, r2, r1
 8004774:	6339      	str	r1, [r7, #48]	@ 0x30
 8004776:	4649      	mov	r1, r9
 8004778:	414b      	adcs	r3, r1
 800477a:	637b      	str	r3, [r7, #52]	@ 0x34
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004788:	4659      	mov	r1, fp
 800478a:	00cb      	lsls	r3, r1, #3
 800478c:	4651      	mov	r1, sl
 800478e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004792:	4651      	mov	r1, sl
 8004794:	00ca      	lsls	r2, r1, #3
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	4603      	mov	r3, r0
 800479c:	4642      	mov	r2, r8
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047a4:	464b      	mov	r3, r9
 80047a6:	460a      	mov	r2, r1
 80047a8:	eb42 0303 	adc.w	r3, r2, r3
 80047ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80047c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047c4:	460b      	mov	r3, r1
 80047c6:	18db      	adds	r3, r3, r3
 80047c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ca:	4613      	mov	r3, r2
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80047da:	f7fc f9e7 	bl	8000bac <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004818 <UART_SetConfig+0x2d4>)
 80047e4:	fba3 1302 	umull	r1, r3, r3, r2
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	2164      	movs	r1, #100	@ 0x64
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	3332      	adds	r3, #50	@ 0x32
 80047f6:	4a08      	ldr	r2, [pc, #32]	@ (8004818 <UART_SetConfig+0x2d4>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	f003 0207 	and.w	r2, r3, #7
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4422      	add	r2, r4
 800480a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800480c:	e106      	b.n	8004a1c <UART_SetConfig+0x4d8>
 800480e:	bf00      	nop
 8004810:	40011000 	.word	0x40011000
 8004814:	40011400 	.word	0x40011400
 8004818:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800481c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004820:	2200      	movs	r2, #0
 8004822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004826:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800482a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800482e:	4642      	mov	r2, r8
 8004830:	464b      	mov	r3, r9
 8004832:	1891      	adds	r1, r2, r2
 8004834:	6239      	str	r1, [r7, #32]
 8004836:	415b      	adcs	r3, r3
 8004838:	627b      	str	r3, [r7, #36]	@ 0x24
 800483a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800483e:	4641      	mov	r1, r8
 8004840:	1854      	adds	r4, r2, r1
 8004842:	4649      	mov	r1, r9
 8004844:	eb43 0501 	adc.w	r5, r3, r1
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	00eb      	lsls	r3, r5, #3
 8004852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004856:	00e2      	lsls	r2, r4, #3
 8004858:	4614      	mov	r4, r2
 800485a:	461d      	mov	r5, r3
 800485c:	4643      	mov	r3, r8
 800485e:	18e3      	adds	r3, r4, r3
 8004860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004864:	464b      	mov	r3, r9
 8004866:	eb45 0303 	adc.w	r3, r5, r3
 800486a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800487a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800488a:	4629      	mov	r1, r5
 800488c:	008b      	lsls	r3, r1, #2
 800488e:	4621      	mov	r1, r4
 8004890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004894:	4621      	mov	r1, r4
 8004896:	008a      	lsls	r2, r1, #2
 8004898:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800489c:	f7fc f986 	bl	8000bac <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4b60      	ldr	r3, [pc, #384]	@ (8004a28 <UART_SetConfig+0x4e4>)
 80048a6:	fba3 2302 	umull	r2, r3, r3, r2
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	011c      	lsls	r4, r3, #4
 80048ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80048bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80048c0:	4642      	mov	r2, r8
 80048c2:	464b      	mov	r3, r9
 80048c4:	1891      	adds	r1, r2, r2
 80048c6:	61b9      	str	r1, [r7, #24]
 80048c8:	415b      	adcs	r3, r3
 80048ca:	61fb      	str	r3, [r7, #28]
 80048cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048d0:	4641      	mov	r1, r8
 80048d2:	1851      	adds	r1, r2, r1
 80048d4:	6139      	str	r1, [r7, #16]
 80048d6:	4649      	mov	r1, r9
 80048d8:	414b      	adcs	r3, r1
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048e8:	4659      	mov	r1, fp
 80048ea:	00cb      	lsls	r3, r1, #3
 80048ec:	4651      	mov	r1, sl
 80048ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f2:	4651      	mov	r1, sl
 80048f4:	00ca      	lsls	r2, r1, #3
 80048f6:	4610      	mov	r0, r2
 80048f8:	4619      	mov	r1, r3
 80048fa:	4603      	mov	r3, r0
 80048fc:	4642      	mov	r2, r8
 80048fe:	189b      	adds	r3, r3, r2
 8004900:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004904:	464b      	mov	r3, r9
 8004906:	460a      	mov	r2, r1
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	67bb      	str	r3, [r7, #120]	@ 0x78
 800491a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004928:	4649      	mov	r1, r9
 800492a:	008b      	lsls	r3, r1, #2
 800492c:	4641      	mov	r1, r8
 800492e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004932:	4641      	mov	r1, r8
 8004934:	008a      	lsls	r2, r1, #2
 8004936:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800493a:	f7fc f937 	bl	8000bac <__aeabi_uldivmod>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4611      	mov	r1, r2
 8004944:	4b38      	ldr	r3, [pc, #224]	@ (8004a28 <UART_SetConfig+0x4e4>)
 8004946:	fba3 2301 	umull	r2, r3, r3, r1
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	2264      	movs	r2, #100	@ 0x64
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	1acb      	subs	r3, r1, r3
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	3332      	adds	r3, #50	@ 0x32
 8004958:	4a33      	ldr	r2, [pc, #204]	@ (8004a28 <UART_SetConfig+0x4e4>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004964:	441c      	add	r4, r3
 8004966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800496a:	2200      	movs	r2, #0
 800496c:	673b      	str	r3, [r7, #112]	@ 0x70
 800496e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004970:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004974:	4642      	mov	r2, r8
 8004976:	464b      	mov	r3, r9
 8004978:	1891      	adds	r1, r2, r2
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	415b      	adcs	r3, r3
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004984:	4641      	mov	r1, r8
 8004986:	1851      	adds	r1, r2, r1
 8004988:	6039      	str	r1, [r7, #0]
 800498a:	4649      	mov	r1, r9
 800498c:	414b      	adcs	r3, r1
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800499c:	4659      	mov	r1, fp
 800499e:	00cb      	lsls	r3, r1, #3
 80049a0:	4651      	mov	r1, sl
 80049a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049a6:	4651      	mov	r1, sl
 80049a8:	00ca      	lsls	r2, r1, #3
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	4603      	mov	r3, r0
 80049b0:	4642      	mov	r2, r8
 80049b2:	189b      	adds	r3, r3, r2
 80049b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049b6:	464b      	mov	r3, r9
 80049b8:	460a      	mov	r2, r1
 80049ba:	eb42 0303 	adc.w	r3, r2, r3
 80049be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80049ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80049cc:	f04f 0200 	mov.w	r2, #0
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80049d8:	4649      	mov	r1, r9
 80049da:	008b      	lsls	r3, r1, #2
 80049dc:	4641      	mov	r1, r8
 80049de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e2:	4641      	mov	r1, r8
 80049e4:	008a      	lsls	r2, r1, #2
 80049e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80049ea:	f7fc f8df 	bl	8000bac <__aeabi_uldivmod>
 80049ee:	4602      	mov	r2, r0
 80049f0:	460b      	mov	r3, r1
 80049f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a28 <UART_SetConfig+0x4e4>)
 80049f4:	fba3 1302 	umull	r1, r3, r3, r2
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	2164      	movs	r1, #100	@ 0x64
 80049fc:	fb01 f303 	mul.w	r3, r1, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	3332      	adds	r3, #50	@ 0x32
 8004a06:	4a08      	ldr	r2, [pc, #32]	@ (8004a28 <UART_SetConfig+0x4e4>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	f003 020f 	and.w	r2, r3, #15
 8004a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4422      	add	r2, r4
 8004a1a:	609a      	str	r2, [r3, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004a22:	46bd      	mov	sp, r7
 8004a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a28:	51eb851f 	.word	0x51eb851f

08004a2c <std>:
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	b510      	push	{r4, lr}
 8004a30:	4604      	mov	r4, r0
 8004a32:	e9c0 3300 	strd	r3, r3, [r0]
 8004a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a3a:	6083      	str	r3, [r0, #8]
 8004a3c:	8181      	strh	r1, [r0, #12]
 8004a3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a40:	81c2      	strh	r2, [r0, #14]
 8004a42:	6183      	str	r3, [r0, #24]
 8004a44:	4619      	mov	r1, r3
 8004a46:	2208      	movs	r2, #8
 8004a48:	305c      	adds	r0, #92	@ 0x5c
 8004a4a:	f000 f9f9 	bl	8004e40 <memset>
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a84 <std+0x58>)
 8004a50:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a52:	4b0d      	ldr	r3, [pc, #52]	@ (8004a88 <std+0x5c>)
 8004a54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a56:	4b0d      	ldr	r3, [pc, #52]	@ (8004a8c <std+0x60>)
 8004a58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a90 <std+0x64>)
 8004a5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <std+0x68>)
 8004a60:	6224      	str	r4, [r4, #32]
 8004a62:	429c      	cmp	r4, r3
 8004a64:	d006      	beq.n	8004a74 <std+0x48>
 8004a66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a6a:	4294      	cmp	r4, r2
 8004a6c:	d002      	beq.n	8004a74 <std+0x48>
 8004a6e:	33d0      	adds	r3, #208	@ 0xd0
 8004a70:	429c      	cmp	r4, r3
 8004a72:	d105      	bne.n	8004a80 <std+0x54>
 8004a74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a7c:	f000 ba58 	b.w	8004f30 <__retarget_lock_init_recursive>
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	bf00      	nop
 8004a84:	08004c91 	.word	0x08004c91
 8004a88:	08004cb3 	.word	0x08004cb3
 8004a8c:	08004ceb 	.word	0x08004ceb
 8004a90:	08004d0f 	.word	0x08004d0f
 8004a94:	200001a0 	.word	0x200001a0

08004a98 <stdio_exit_handler>:
 8004a98:	4a02      	ldr	r2, [pc, #8]	@ (8004aa4 <stdio_exit_handler+0xc>)
 8004a9a:	4903      	ldr	r1, [pc, #12]	@ (8004aa8 <stdio_exit_handler+0x10>)
 8004a9c:	4803      	ldr	r0, [pc, #12]	@ (8004aac <stdio_exit_handler+0x14>)
 8004a9e:	f000 b869 	b.w	8004b74 <_fwalk_sglue>
 8004aa2:	bf00      	nop
 8004aa4:	20000014 	.word	0x20000014
 8004aa8:	080057d1 	.word	0x080057d1
 8004aac:	20000024 	.word	0x20000024

08004ab0 <cleanup_stdio>:
 8004ab0:	6841      	ldr	r1, [r0, #4]
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <cleanup_stdio+0x34>)
 8004ab4:	4299      	cmp	r1, r3
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	4604      	mov	r4, r0
 8004aba:	d001      	beq.n	8004ac0 <cleanup_stdio+0x10>
 8004abc:	f000 fe88 	bl	80057d0 <_fflush_r>
 8004ac0:	68a1      	ldr	r1, [r4, #8]
 8004ac2:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <cleanup_stdio+0x38>)
 8004ac4:	4299      	cmp	r1, r3
 8004ac6:	d002      	beq.n	8004ace <cleanup_stdio+0x1e>
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 fe81 	bl	80057d0 <_fflush_r>
 8004ace:	68e1      	ldr	r1, [r4, #12]
 8004ad0:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <cleanup_stdio+0x3c>)
 8004ad2:	4299      	cmp	r1, r3
 8004ad4:	d004      	beq.n	8004ae0 <cleanup_stdio+0x30>
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004adc:	f000 be78 	b.w	80057d0 <_fflush_r>
 8004ae0:	bd10      	pop	{r4, pc}
 8004ae2:	bf00      	nop
 8004ae4:	200001a0 	.word	0x200001a0
 8004ae8:	20000208 	.word	0x20000208
 8004aec:	20000270 	.word	0x20000270

08004af0 <global_stdio_init.part.0>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <global_stdio_init.part.0+0x30>)
 8004af4:	4c0b      	ldr	r4, [pc, #44]	@ (8004b24 <global_stdio_init.part.0+0x34>)
 8004af6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b28 <global_stdio_init.part.0+0x38>)
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	4620      	mov	r0, r4
 8004afc:	2200      	movs	r2, #0
 8004afe:	2104      	movs	r1, #4
 8004b00:	f7ff ff94 	bl	8004a2c <std>
 8004b04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b08:	2201      	movs	r2, #1
 8004b0a:	2109      	movs	r1, #9
 8004b0c:	f7ff ff8e 	bl	8004a2c <std>
 8004b10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b14:	2202      	movs	r2, #2
 8004b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b1a:	2112      	movs	r1, #18
 8004b1c:	f7ff bf86 	b.w	8004a2c <std>
 8004b20:	200002d8 	.word	0x200002d8
 8004b24:	200001a0 	.word	0x200001a0
 8004b28:	08004a99 	.word	0x08004a99

08004b2c <__sfp_lock_acquire>:
 8004b2c:	4801      	ldr	r0, [pc, #4]	@ (8004b34 <__sfp_lock_acquire+0x8>)
 8004b2e:	f000 ba00 	b.w	8004f32 <__retarget_lock_acquire_recursive>
 8004b32:	bf00      	nop
 8004b34:	200002e1 	.word	0x200002e1

08004b38 <__sfp_lock_release>:
 8004b38:	4801      	ldr	r0, [pc, #4]	@ (8004b40 <__sfp_lock_release+0x8>)
 8004b3a:	f000 b9fb 	b.w	8004f34 <__retarget_lock_release_recursive>
 8004b3e:	bf00      	nop
 8004b40:	200002e1 	.word	0x200002e1

08004b44 <__sinit>:
 8004b44:	b510      	push	{r4, lr}
 8004b46:	4604      	mov	r4, r0
 8004b48:	f7ff fff0 	bl	8004b2c <__sfp_lock_acquire>
 8004b4c:	6a23      	ldr	r3, [r4, #32]
 8004b4e:	b11b      	cbz	r3, 8004b58 <__sinit+0x14>
 8004b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b54:	f7ff bff0 	b.w	8004b38 <__sfp_lock_release>
 8004b58:	4b04      	ldr	r3, [pc, #16]	@ (8004b6c <__sinit+0x28>)
 8004b5a:	6223      	str	r3, [r4, #32]
 8004b5c:	4b04      	ldr	r3, [pc, #16]	@ (8004b70 <__sinit+0x2c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f5      	bne.n	8004b50 <__sinit+0xc>
 8004b64:	f7ff ffc4 	bl	8004af0 <global_stdio_init.part.0>
 8004b68:	e7f2      	b.n	8004b50 <__sinit+0xc>
 8004b6a:	bf00      	nop
 8004b6c:	08004ab1 	.word	0x08004ab1
 8004b70:	200002d8 	.word	0x200002d8

08004b74 <_fwalk_sglue>:
 8004b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b78:	4607      	mov	r7, r0
 8004b7a:	4688      	mov	r8, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	2600      	movs	r6, #0
 8004b80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b84:	f1b9 0901 	subs.w	r9, r9, #1
 8004b88:	d505      	bpl.n	8004b96 <_fwalk_sglue+0x22>
 8004b8a:	6824      	ldr	r4, [r4, #0]
 8004b8c:	2c00      	cmp	r4, #0
 8004b8e:	d1f7      	bne.n	8004b80 <_fwalk_sglue+0xc>
 8004b90:	4630      	mov	r0, r6
 8004b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b96:	89ab      	ldrh	r3, [r5, #12]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d907      	bls.n	8004bac <_fwalk_sglue+0x38>
 8004b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	d003      	beq.n	8004bac <_fwalk_sglue+0x38>
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	47c0      	blx	r8
 8004baa:	4306      	orrs	r6, r0
 8004bac:	3568      	adds	r5, #104	@ 0x68
 8004bae:	e7e9      	b.n	8004b84 <_fwalk_sglue+0x10>

08004bb0 <iprintf>:
 8004bb0:	b40f      	push	{r0, r1, r2, r3}
 8004bb2:	b507      	push	{r0, r1, r2, lr}
 8004bb4:	4906      	ldr	r1, [pc, #24]	@ (8004bd0 <iprintf+0x20>)
 8004bb6:	ab04      	add	r3, sp, #16
 8004bb8:	6808      	ldr	r0, [r1, #0]
 8004bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bbe:	6881      	ldr	r1, [r0, #8]
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	f000 fadb 	bl	800517c <_vfiprintf_r>
 8004bc6:	b003      	add	sp, #12
 8004bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bcc:	b004      	add	sp, #16
 8004bce:	4770      	bx	lr
 8004bd0:	20000020 	.word	0x20000020

08004bd4 <_puts_r>:
 8004bd4:	6a03      	ldr	r3, [r0, #32]
 8004bd6:	b570      	push	{r4, r5, r6, lr}
 8004bd8:	6884      	ldr	r4, [r0, #8]
 8004bda:	4605      	mov	r5, r0
 8004bdc:	460e      	mov	r6, r1
 8004bde:	b90b      	cbnz	r3, 8004be4 <_puts_r+0x10>
 8004be0:	f7ff ffb0 	bl	8004b44 <__sinit>
 8004be4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004be6:	07db      	lsls	r3, r3, #31
 8004be8:	d405      	bmi.n	8004bf6 <_puts_r+0x22>
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	0598      	lsls	r0, r3, #22
 8004bee:	d402      	bmi.n	8004bf6 <_puts_r+0x22>
 8004bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004bf2:	f000 f99e 	bl	8004f32 <__retarget_lock_acquire_recursive>
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	0719      	lsls	r1, r3, #28
 8004bfa:	d502      	bpl.n	8004c02 <_puts_r+0x2e>
 8004bfc:	6923      	ldr	r3, [r4, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d135      	bne.n	8004c6e <_puts_r+0x9a>
 8004c02:	4621      	mov	r1, r4
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 f8c5 	bl	8004d94 <__swsetup_r>
 8004c0a:	b380      	cbz	r0, 8004c6e <_puts_r+0x9a>
 8004c0c:	f04f 35ff 	mov.w	r5, #4294967295
 8004c10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c12:	07da      	lsls	r2, r3, #31
 8004c14:	d405      	bmi.n	8004c22 <_puts_r+0x4e>
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	059b      	lsls	r3, r3, #22
 8004c1a:	d402      	bmi.n	8004c22 <_puts_r+0x4e>
 8004c1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c1e:	f000 f989 	bl	8004f34 <__retarget_lock_release_recursive>
 8004c22:	4628      	mov	r0, r5
 8004c24:	bd70      	pop	{r4, r5, r6, pc}
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da04      	bge.n	8004c34 <_puts_r+0x60>
 8004c2a:	69a2      	ldr	r2, [r4, #24]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	dc17      	bgt.n	8004c60 <_puts_r+0x8c>
 8004c30:	290a      	cmp	r1, #10
 8004c32:	d015      	beq.n	8004c60 <_puts_r+0x8c>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	6022      	str	r2, [r4, #0]
 8004c3a:	7019      	strb	r1, [r3, #0]
 8004c3c:	68a3      	ldr	r3, [r4, #8]
 8004c3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c42:	3b01      	subs	r3, #1
 8004c44:	60a3      	str	r3, [r4, #8]
 8004c46:	2900      	cmp	r1, #0
 8004c48:	d1ed      	bne.n	8004c26 <_puts_r+0x52>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	da11      	bge.n	8004c72 <_puts_r+0x9e>
 8004c4e:	4622      	mov	r2, r4
 8004c50:	210a      	movs	r1, #10
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 f85f 	bl	8004d16 <__swbuf_r>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d0d7      	beq.n	8004c0c <_puts_r+0x38>
 8004c5c:	250a      	movs	r5, #10
 8004c5e:	e7d7      	b.n	8004c10 <_puts_r+0x3c>
 8004c60:	4622      	mov	r2, r4
 8004c62:	4628      	mov	r0, r5
 8004c64:	f000 f857 	bl	8004d16 <__swbuf_r>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d1e7      	bne.n	8004c3c <_puts_r+0x68>
 8004c6c:	e7ce      	b.n	8004c0c <_puts_r+0x38>
 8004c6e:	3e01      	subs	r6, #1
 8004c70:	e7e4      	b.n	8004c3c <_puts_r+0x68>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	6022      	str	r2, [r4, #0]
 8004c78:	220a      	movs	r2, #10
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	e7ee      	b.n	8004c5c <_puts_r+0x88>
	...

08004c80 <puts>:
 8004c80:	4b02      	ldr	r3, [pc, #8]	@ (8004c8c <puts+0xc>)
 8004c82:	4601      	mov	r1, r0
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	f7ff bfa5 	b.w	8004bd4 <_puts_r>
 8004c8a:	bf00      	nop
 8004c8c:	20000020 	.word	0x20000020

08004c90 <__sread>:
 8004c90:	b510      	push	{r4, lr}
 8004c92:	460c      	mov	r4, r1
 8004c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c98:	f000 f8fc 	bl	8004e94 <_read_r>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	bfab      	itete	ge
 8004ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ca4:	181b      	addge	r3, r3, r0
 8004ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004caa:	bfac      	ite	ge
 8004cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cae:	81a3      	strhlt	r3, [r4, #12]
 8004cb0:	bd10      	pop	{r4, pc}

08004cb2 <__swrite>:
 8004cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb6:	461f      	mov	r7, r3
 8004cb8:	898b      	ldrh	r3, [r1, #12]
 8004cba:	05db      	lsls	r3, r3, #23
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	4616      	mov	r6, r2
 8004cc2:	d505      	bpl.n	8004cd0 <__swrite+0x1e>
 8004cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc8:	2302      	movs	r3, #2
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f000 f8d0 	bl	8004e70 <_lseek_r>
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cd6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	4632      	mov	r2, r6
 8004cde:	463b      	mov	r3, r7
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce6:	f000 b8e7 	b.w	8004eb8 <_write_r>

08004cea <__sseek>:
 8004cea:	b510      	push	{r4, lr}
 8004cec:	460c      	mov	r4, r1
 8004cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf2:	f000 f8bd 	bl	8004e70 <_lseek_r>
 8004cf6:	1c43      	adds	r3, r0, #1
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	bf15      	itete	ne
 8004cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d06:	81a3      	strheq	r3, [r4, #12]
 8004d08:	bf18      	it	ne
 8004d0a:	81a3      	strhne	r3, [r4, #12]
 8004d0c:	bd10      	pop	{r4, pc}

08004d0e <__sclose>:
 8004d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d12:	f000 b89d 	b.w	8004e50 <_close_r>

08004d16 <__swbuf_r>:
 8004d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d18:	460e      	mov	r6, r1
 8004d1a:	4614      	mov	r4, r2
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	b118      	cbz	r0, 8004d28 <__swbuf_r+0x12>
 8004d20:	6a03      	ldr	r3, [r0, #32]
 8004d22:	b90b      	cbnz	r3, 8004d28 <__swbuf_r+0x12>
 8004d24:	f7ff ff0e 	bl	8004b44 <__sinit>
 8004d28:	69a3      	ldr	r3, [r4, #24]
 8004d2a:	60a3      	str	r3, [r4, #8]
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	071a      	lsls	r2, r3, #28
 8004d30:	d501      	bpl.n	8004d36 <__swbuf_r+0x20>
 8004d32:	6923      	ldr	r3, [r4, #16]
 8004d34:	b943      	cbnz	r3, 8004d48 <__swbuf_r+0x32>
 8004d36:	4621      	mov	r1, r4
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f000 f82b 	bl	8004d94 <__swsetup_r>
 8004d3e:	b118      	cbz	r0, 8004d48 <__swbuf_r+0x32>
 8004d40:	f04f 37ff 	mov.w	r7, #4294967295
 8004d44:	4638      	mov	r0, r7
 8004d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	6922      	ldr	r2, [r4, #16]
 8004d4c:	1a98      	subs	r0, r3, r2
 8004d4e:	6963      	ldr	r3, [r4, #20]
 8004d50:	b2f6      	uxtb	r6, r6
 8004d52:	4283      	cmp	r3, r0
 8004d54:	4637      	mov	r7, r6
 8004d56:	dc05      	bgt.n	8004d64 <__swbuf_r+0x4e>
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 fd38 	bl	80057d0 <_fflush_r>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d1ed      	bne.n	8004d40 <__swbuf_r+0x2a>
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	6022      	str	r2, [r4, #0]
 8004d70:	701e      	strb	r6, [r3, #0]
 8004d72:	6962      	ldr	r2, [r4, #20]
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d004      	beq.n	8004d84 <__swbuf_r+0x6e>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	07db      	lsls	r3, r3, #31
 8004d7e:	d5e1      	bpl.n	8004d44 <__swbuf_r+0x2e>
 8004d80:	2e0a      	cmp	r6, #10
 8004d82:	d1df      	bne.n	8004d44 <__swbuf_r+0x2e>
 8004d84:	4621      	mov	r1, r4
 8004d86:	4628      	mov	r0, r5
 8004d88:	f000 fd22 	bl	80057d0 <_fflush_r>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d0d9      	beq.n	8004d44 <__swbuf_r+0x2e>
 8004d90:	e7d6      	b.n	8004d40 <__swbuf_r+0x2a>
	...

08004d94 <__swsetup_r>:
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	4b29      	ldr	r3, [pc, #164]	@ (8004e3c <__swsetup_r+0xa8>)
 8004d98:	4605      	mov	r5, r0
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	b118      	cbz	r0, 8004da8 <__swsetup_r+0x14>
 8004da0:	6a03      	ldr	r3, [r0, #32]
 8004da2:	b90b      	cbnz	r3, 8004da8 <__swsetup_r+0x14>
 8004da4:	f7ff fece 	bl	8004b44 <__sinit>
 8004da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dac:	0719      	lsls	r1, r3, #28
 8004dae:	d422      	bmi.n	8004df6 <__swsetup_r+0x62>
 8004db0:	06da      	lsls	r2, r3, #27
 8004db2:	d407      	bmi.n	8004dc4 <__swsetup_r+0x30>
 8004db4:	2209      	movs	r2, #9
 8004db6:	602a      	str	r2, [r5, #0]
 8004db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dbc:	81a3      	strh	r3, [r4, #12]
 8004dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc2:	e033      	b.n	8004e2c <__swsetup_r+0x98>
 8004dc4:	0758      	lsls	r0, r3, #29
 8004dc6:	d512      	bpl.n	8004dee <__swsetup_r+0x5a>
 8004dc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dca:	b141      	cbz	r1, 8004dde <__swsetup_r+0x4a>
 8004dcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004dd0:	4299      	cmp	r1, r3
 8004dd2:	d002      	beq.n	8004dda <__swsetup_r+0x46>
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 f8af 	bl	8004f38 <_free_r>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004de4:	81a3      	strh	r3, [r4, #12]
 8004de6:	2300      	movs	r3, #0
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	f043 0308 	orr.w	r3, r3, #8
 8004df4:	81a3      	strh	r3, [r4, #12]
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	b94b      	cbnz	r3, 8004e0e <__swsetup_r+0x7a>
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e04:	d003      	beq.n	8004e0e <__swsetup_r+0x7a>
 8004e06:	4621      	mov	r1, r4
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 fd2f 	bl	800586c <__smakebuf_r>
 8004e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e12:	f013 0201 	ands.w	r2, r3, #1
 8004e16:	d00a      	beq.n	8004e2e <__swsetup_r+0x9a>
 8004e18:	2200      	movs	r2, #0
 8004e1a:	60a2      	str	r2, [r4, #8]
 8004e1c:	6962      	ldr	r2, [r4, #20]
 8004e1e:	4252      	negs	r2, r2
 8004e20:	61a2      	str	r2, [r4, #24]
 8004e22:	6922      	ldr	r2, [r4, #16]
 8004e24:	b942      	cbnz	r2, 8004e38 <__swsetup_r+0xa4>
 8004e26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e2a:	d1c5      	bne.n	8004db8 <__swsetup_r+0x24>
 8004e2c:	bd38      	pop	{r3, r4, r5, pc}
 8004e2e:	0799      	lsls	r1, r3, #30
 8004e30:	bf58      	it	pl
 8004e32:	6962      	ldrpl	r2, [r4, #20]
 8004e34:	60a2      	str	r2, [r4, #8]
 8004e36:	e7f4      	b.n	8004e22 <__swsetup_r+0x8e>
 8004e38:	2000      	movs	r0, #0
 8004e3a:	e7f7      	b.n	8004e2c <__swsetup_r+0x98>
 8004e3c:	20000020 	.word	0x20000020

08004e40 <memset>:
 8004e40:	4402      	add	r2, r0
 8004e42:	4603      	mov	r3, r0
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d100      	bne.n	8004e4a <memset+0xa>
 8004e48:	4770      	bx	lr
 8004e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e4e:	e7f9      	b.n	8004e44 <memset+0x4>

08004e50 <_close_r>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	4d06      	ldr	r5, [pc, #24]	@ (8004e6c <_close_r+0x1c>)
 8004e54:	2300      	movs	r3, #0
 8004e56:	4604      	mov	r4, r0
 8004e58:	4608      	mov	r0, r1
 8004e5a:	602b      	str	r3, [r5, #0]
 8004e5c:	f7fc ff22 	bl	8001ca4 <_close>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d102      	bne.n	8004e6a <_close_r+0x1a>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	b103      	cbz	r3, 8004e6a <_close_r+0x1a>
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	200002dc 	.word	0x200002dc

08004e70 <_lseek_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4d07      	ldr	r5, [pc, #28]	@ (8004e90 <_lseek_r+0x20>)
 8004e74:	4604      	mov	r4, r0
 8004e76:	4608      	mov	r0, r1
 8004e78:	4611      	mov	r1, r2
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	602a      	str	r2, [r5, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f7fc ff37 	bl	8001cf2 <_lseek>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d102      	bne.n	8004e8e <_lseek_r+0x1e>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	b103      	cbz	r3, 8004e8e <_lseek_r+0x1e>
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
 8004e90:	200002dc 	.word	0x200002dc

08004e94 <_read_r>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4d07      	ldr	r5, [pc, #28]	@ (8004eb4 <_read_r+0x20>)
 8004e98:	4604      	mov	r4, r0
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	602a      	str	r2, [r5, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f7fc fec5 	bl	8001c32 <_read>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_read_r+0x1e>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_read_r+0x1e>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	200002dc 	.word	0x200002dc

08004eb8 <_write_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d07      	ldr	r5, [pc, #28]	@ (8004ed8 <_write_r+0x20>)
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	602a      	str	r2, [r5, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f7fc fed0 	bl	8001c6c <_write>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_write_r+0x1e>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_write_r+0x1e>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	200002dc 	.word	0x200002dc

08004edc <__errno>:
 8004edc:	4b01      	ldr	r3, [pc, #4]	@ (8004ee4 <__errno+0x8>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000020 	.word	0x20000020

08004ee8 <__libc_init_array>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4d0d      	ldr	r5, [pc, #52]	@ (8004f20 <__libc_init_array+0x38>)
 8004eec:	4c0d      	ldr	r4, [pc, #52]	@ (8004f24 <__libc_init_array+0x3c>)
 8004eee:	1b64      	subs	r4, r4, r5
 8004ef0:	10a4      	asrs	r4, r4, #2
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	42a6      	cmp	r6, r4
 8004ef6:	d109      	bne.n	8004f0c <__libc_init_array+0x24>
 8004ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8004f28 <__libc_init_array+0x40>)
 8004efa:	4c0c      	ldr	r4, [pc, #48]	@ (8004f2c <__libc_init_array+0x44>)
 8004efc:	f000 fd24 	bl	8005948 <_init>
 8004f00:	1b64      	subs	r4, r4, r5
 8004f02:	10a4      	asrs	r4, r4, #2
 8004f04:	2600      	movs	r6, #0
 8004f06:	42a6      	cmp	r6, r4
 8004f08:	d105      	bne.n	8004f16 <__libc_init_array+0x2e>
 8004f0a:	bd70      	pop	{r4, r5, r6, pc}
 8004f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f10:	4798      	blx	r3
 8004f12:	3601      	adds	r6, #1
 8004f14:	e7ee      	b.n	8004ef4 <__libc_init_array+0xc>
 8004f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1a:	4798      	blx	r3
 8004f1c:	3601      	adds	r6, #1
 8004f1e:	e7f2      	b.n	8004f06 <__libc_init_array+0x1e>
 8004f20:	08005c38 	.word	0x08005c38
 8004f24:	08005c38 	.word	0x08005c38
 8004f28:	08005c38 	.word	0x08005c38
 8004f2c:	08005c3c 	.word	0x08005c3c

08004f30 <__retarget_lock_init_recursive>:
 8004f30:	4770      	bx	lr

08004f32 <__retarget_lock_acquire_recursive>:
 8004f32:	4770      	bx	lr

08004f34 <__retarget_lock_release_recursive>:
 8004f34:	4770      	bx	lr
	...

08004f38 <_free_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	2900      	cmp	r1, #0
 8004f3e:	d041      	beq.n	8004fc4 <_free_r+0x8c>
 8004f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f44:	1f0c      	subs	r4, r1, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bfb8      	it	lt
 8004f4a:	18e4      	addlt	r4, r4, r3
 8004f4c:	f000 f8e0 	bl	8005110 <__malloc_lock>
 8004f50:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <_free_r+0x90>)
 8004f52:	6813      	ldr	r3, [r2, #0]
 8004f54:	b933      	cbnz	r3, 8004f64 <_free_r+0x2c>
 8004f56:	6063      	str	r3, [r4, #4]
 8004f58:	6014      	str	r4, [r2, #0]
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f60:	f000 b8dc 	b.w	800511c <__malloc_unlock>
 8004f64:	42a3      	cmp	r3, r4
 8004f66:	d908      	bls.n	8004f7a <_free_r+0x42>
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	1821      	adds	r1, r4, r0
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	bf01      	itttt	eq
 8004f70:	6819      	ldreq	r1, [r3, #0]
 8004f72:	685b      	ldreq	r3, [r3, #4]
 8004f74:	1809      	addeq	r1, r1, r0
 8004f76:	6021      	streq	r1, [r4, #0]
 8004f78:	e7ed      	b.n	8004f56 <_free_r+0x1e>
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	b10b      	cbz	r3, 8004f84 <_free_r+0x4c>
 8004f80:	42a3      	cmp	r3, r4
 8004f82:	d9fa      	bls.n	8004f7a <_free_r+0x42>
 8004f84:	6811      	ldr	r1, [r2, #0]
 8004f86:	1850      	adds	r0, r2, r1
 8004f88:	42a0      	cmp	r0, r4
 8004f8a:	d10b      	bne.n	8004fa4 <_free_r+0x6c>
 8004f8c:	6820      	ldr	r0, [r4, #0]
 8004f8e:	4401      	add	r1, r0
 8004f90:	1850      	adds	r0, r2, r1
 8004f92:	4283      	cmp	r3, r0
 8004f94:	6011      	str	r1, [r2, #0]
 8004f96:	d1e0      	bne.n	8004f5a <_free_r+0x22>
 8004f98:	6818      	ldr	r0, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	6053      	str	r3, [r2, #4]
 8004f9e:	4408      	add	r0, r1
 8004fa0:	6010      	str	r0, [r2, #0]
 8004fa2:	e7da      	b.n	8004f5a <_free_r+0x22>
 8004fa4:	d902      	bls.n	8004fac <_free_r+0x74>
 8004fa6:	230c      	movs	r3, #12
 8004fa8:	602b      	str	r3, [r5, #0]
 8004faa:	e7d6      	b.n	8004f5a <_free_r+0x22>
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	1821      	adds	r1, r4, r0
 8004fb0:	428b      	cmp	r3, r1
 8004fb2:	bf04      	itt	eq
 8004fb4:	6819      	ldreq	r1, [r3, #0]
 8004fb6:	685b      	ldreq	r3, [r3, #4]
 8004fb8:	6063      	str	r3, [r4, #4]
 8004fba:	bf04      	itt	eq
 8004fbc:	1809      	addeq	r1, r1, r0
 8004fbe:	6021      	streq	r1, [r4, #0]
 8004fc0:	6054      	str	r4, [r2, #4]
 8004fc2:	e7ca      	b.n	8004f5a <_free_r+0x22>
 8004fc4:	bd38      	pop	{r3, r4, r5, pc}
 8004fc6:	bf00      	nop
 8004fc8:	200002e8 	.word	0x200002e8

08004fcc <sbrk_aligned>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	4e0f      	ldr	r6, [pc, #60]	@ (800500c <sbrk_aligned+0x40>)
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	6831      	ldr	r1, [r6, #0]
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	b911      	cbnz	r1, 8004fde <sbrk_aligned+0x12>
 8004fd8:	f000 fca6 	bl	8005928 <_sbrk_r>
 8004fdc:	6030      	str	r0, [r6, #0]
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f000 fca1 	bl	8005928 <_sbrk_r>
 8004fe6:	1c43      	adds	r3, r0, #1
 8004fe8:	d103      	bne.n	8004ff2 <sbrk_aligned+0x26>
 8004fea:	f04f 34ff 	mov.w	r4, #4294967295
 8004fee:	4620      	mov	r0, r4
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
 8004ff2:	1cc4      	adds	r4, r0, #3
 8004ff4:	f024 0403 	bic.w	r4, r4, #3
 8004ff8:	42a0      	cmp	r0, r4
 8004ffa:	d0f8      	beq.n	8004fee <sbrk_aligned+0x22>
 8004ffc:	1a21      	subs	r1, r4, r0
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 fc92 	bl	8005928 <_sbrk_r>
 8005004:	3001      	adds	r0, #1
 8005006:	d1f2      	bne.n	8004fee <sbrk_aligned+0x22>
 8005008:	e7ef      	b.n	8004fea <sbrk_aligned+0x1e>
 800500a:	bf00      	nop
 800500c:	200002e4 	.word	0x200002e4

08005010 <_malloc_r>:
 8005010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005014:	1ccd      	adds	r5, r1, #3
 8005016:	f025 0503 	bic.w	r5, r5, #3
 800501a:	3508      	adds	r5, #8
 800501c:	2d0c      	cmp	r5, #12
 800501e:	bf38      	it	cc
 8005020:	250c      	movcc	r5, #12
 8005022:	2d00      	cmp	r5, #0
 8005024:	4606      	mov	r6, r0
 8005026:	db01      	blt.n	800502c <_malloc_r+0x1c>
 8005028:	42a9      	cmp	r1, r5
 800502a:	d904      	bls.n	8005036 <_malloc_r+0x26>
 800502c:	230c      	movs	r3, #12
 800502e:	6033      	str	r3, [r6, #0]
 8005030:	2000      	movs	r0, #0
 8005032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800510c <_malloc_r+0xfc>
 800503a:	f000 f869 	bl	8005110 <__malloc_lock>
 800503e:	f8d8 3000 	ldr.w	r3, [r8]
 8005042:	461c      	mov	r4, r3
 8005044:	bb44      	cbnz	r4, 8005098 <_malloc_r+0x88>
 8005046:	4629      	mov	r1, r5
 8005048:	4630      	mov	r0, r6
 800504a:	f7ff ffbf 	bl	8004fcc <sbrk_aligned>
 800504e:	1c43      	adds	r3, r0, #1
 8005050:	4604      	mov	r4, r0
 8005052:	d158      	bne.n	8005106 <_malloc_r+0xf6>
 8005054:	f8d8 4000 	ldr.w	r4, [r8]
 8005058:	4627      	mov	r7, r4
 800505a:	2f00      	cmp	r7, #0
 800505c:	d143      	bne.n	80050e6 <_malloc_r+0xd6>
 800505e:	2c00      	cmp	r4, #0
 8005060:	d04b      	beq.n	80050fa <_malloc_r+0xea>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	4639      	mov	r1, r7
 8005066:	4630      	mov	r0, r6
 8005068:	eb04 0903 	add.w	r9, r4, r3
 800506c:	f000 fc5c 	bl	8005928 <_sbrk_r>
 8005070:	4581      	cmp	r9, r0
 8005072:	d142      	bne.n	80050fa <_malloc_r+0xea>
 8005074:	6821      	ldr	r1, [r4, #0]
 8005076:	1a6d      	subs	r5, r5, r1
 8005078:	4629      	mov	r1, r5
 800507a:	4630      	mov	r0, r6
 800507c:	f7ff ffa6 	bl	8004fcc <sbrk_aligned>
 8005080:	3001      	adds	r0, #1
 8005082:	d03a      	beq.n	80050fa <_malloc_r+0xea>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	442b      	add	r3, r5
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	f8d8 3000 	ldr.w	r3, [r8]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	bb62      	cbnz	r2, 80050ec <_malloc_r+0xdc>
 8005092:	f8c8 7000 	str.w	r7, [r8]
 8005096:	e00f      	b.n	80050b8 <_malloc_r+0xa8>
 8005098:	6822      	ldr	r2, [r4, #0]
 800509a:	1b52      	subs	r2, r2, r5
 800509c:	d420      	bmi.n	80050e0 <_malloc_r+0xd0>
 800509e:	2a0b      	cmp	r2, #11
 80050a0:	d917      	bls.n	80050d2 <_malloc_r+0xc2>
 80050a2:	1961      	adds	r1, r4, r5
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	6025      	str	r5, [r4, #0]
 80050a8:	bf18      	it	ne
 80050aa:	6059      	strne	r1, [r3, #4]
 80050ac:	6863      	ldr	r3, [r4, #4]
 80050ae:	bf08      	it	eq
 80050b0:	f8c8 1000 	streq.w	r1, [r8]
 80050b4:	5162      	str	r2, [r4, r5]
 80050b6:	604b      	str	r3, [r1, #4]
 80050b8:	4630      	mov	r0, r6
 80050ba:	f000 f82f 	bl	800511c <__malloc_unlock>
 80050be:	f104 000b 	add.w	r0, r4, #11
 80050c2:	1d23      	adds	r3, r4, #4
 80050c4:	f020 0007 	bic.w	r0, r0, #7
 80050c8:	1ac2      	subs	r2, r0, r3
 80050ca:	bf1c      	itt	ne
 80050cc:	1a1b      	subne	r3, r3, r0
 80050ce:	50a3      	strne	r3, [r4, r2]
 80050d0:	e7af      	b.n	8005032 <_malloc_r+0x22>
 80050d2:	6862      	ldr	r2, [r4, #4]
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	bf0c      	ite	eq
 80050d8:	f8c8 2000 	streq.w	r2, [r8]
 80050dc:	605a      	strne	r2, [r3, #4]
 80050de:	e7eb      	b.n	80050b8 <_malloc_r+0xa8>
 80050e0:	4623      	mov	r3, r4
 80050e2:	6864      	ldr	r4, [r4, #4]
 80050e4:	e7ae      	b.n	8005044 <_malloc_r+0x34>
 80050e6:	463c      	mov	r4, r7
 80050e8:	687f      	ldr	r7, [r7, #4]
 80050ea:	e7b6      	b.n	800505a <_malloc_r+0x4a>
 80050ec:	461a      	mov	r2, r3
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	42a3      	cmp	r3, r4
 80050f2:	d1fb      	bne.n	80050ec <_malloc_r+0xdc>
 80050f4:	2300      	movs	r3, #0
 80050f6:	6053      	str	r3, [r2, #4]
 80050f8:	e7de      	b.n	80050b8 <_malloc_r+0xa8>
 80050fa:	230c      	movs	r3, #12
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	4630      	mov	r0, r6
 8005100:	f000 f80c 	bl	800511c <__malloc_unlock>
 8005104:	e794      	b.n	8005030 <_malloc_r+0x20>
 8005106:	6005      	str	r5, [r0, #0]
 8005108:	e7d6      	b.n	80050b8 <_malloc_r+0xa8>
 800510a:	bf00      	nop
 800510c:	200002e8 	.word	0x200002e8

08005110 <__malloc_lock>:
 8005110:	4801      	ldr	r0, [pc, #4]	@ (8005118 <__malloc_lock+0x8>)
 8005112:	f7ff bf0e 	b.w	8004f32 <__retarget_lock_acquire_recursive>
 8005116:	bf00      	nop
 8005118:	200002e0 	.word	0x200002e0

0800511c <__malloc_unlock>:
 800511c:	4801      	ldr	r0, [pc, #4]	@ (8005124 <__malloc_unlock+0x8>)
 800511e:	f7ff bf09 	b.w	8004f34 <__retarget_lock_release_recursive>
 8005122:	bf00      	nop
 8005124:	200002e0 	.word	0x200002e0

08005128 <__sfputc_r>:
 8005128:	6893      	ldr	r3, [r2, #8]
 800512a:	3b01      	subs	r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	b410      	push	{r4}
 8005130:	6093      	str	r3, [r2, #8]
 8005132:	da08      	bge.n	8005146 <__sfputc_r+0x1e>
 8005134:	6994      	ldr	r4, [r2, #24]
 8005136:	42a3      	cmp	r3, r4
 8005138:	db01      	blt.n	800513e <__sfputc_r+0x16>
 800513a:	290a      	cmp	r1, #10
 800513c:	d103      	bne.n	8005146 <__sfputc_r+0x1e>
 800513e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005142:	f7ff bde8 	b.w	8004d16 <__swbuf_r>
 8005146:	6813      	ldr	r3, [r2, #0]
 8005148:	1c58      	adds	r0, r3, #1
 800514a:	6010      	str	r0, [r2, #0]
 800514c:	7019      	strb	r1, [r3, #0]
 800514e:	4608      	mov	r0, r1
 8005150:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005154:	4770      	bx	lr

08005156 <__sfputs_r>:
 8005156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005158:	4606      	mov	r6, r0
 800515a:	460f      	mov	r7, r1
 800515c:	4614      	mov	r4, r2
 800515e:	18d5      	adds	r5, r2, r3
 8005160:	42ac      	cmp	r4, r5
 8005162:	d101      	bne.n	8005168 <__sfputs_r+0x12>
 8005164:	2000      	movs	r0, #0
 8005166:	e007      	b.n	8005178 <__sfputs_r+0x22>
 8005168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800516c:	463a      	mov	r2, r7
 800516e:	4630      	mov	r0, r6
 8005170:	f7ff ffda 	bl	8005128 <__sfputc_r>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d1f3      	bne.n	8005160 <__sfputs_r+0xa>
 8005178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800517c <_vfiprintf_r>:
 800517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005180:	460d      	mov	r5, r1
 8005182:	b09d      	sub	sp, #116	@ 0x74
 8005184:	4614      	mov	r4, r2
 8005186:	4698      	mov	r8, r3
 8005188:	4606      	mov	r6, r0
 800518a:	b118      	cbz	r0, 8005194 <_vfiprintf_r+0x18>
 800518c:	6a03      	ldr	r3, [r0, #32]
 800518e:	b90b      	cbnz	r3, 8005194 <_vfiprintf_r+0x18>
 8005190:	f7ff fcd8 	bl	8004b44 <__sinit>
 8005194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005196:	07d9      	lsls	r1, r3, #31
 8005198:	d405      	bmi.n	80051a6 <_vfiprintf_r+0x2a>
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	059a      	lsls	r2, r3, #22
 800519e:	d402      	bmi.n	80051a6 <_vfiprintf_r+0x2a>
 80051a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051a2:	f7ff fec6 	bl	8004f32 <__retarget_lock_acquire_recursive>
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	071b      	lsls	r3, r3, #28
 80051aa:	d501      	bpl.n	80051b0 <_vfiprintf_r+0x34>
 80051ac:	692b      	ldr	r3, [r5, #16]
 80051ae:	b99b      	cbnz	r3, 80051d8 <_vfiprintf_r+0x5c>
 80051b0:	4629      	mov	r1, r5
 80051b2:	4630      	mov	r0, r6
 80051b4:	f7ff fdee 	bl	8004d94 <__swsetup_r>
 80051b8:	b170      	cbz	r0, 80051d8 <_vfiprintf_r+0x5c>
 80051ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051bc:	07dc      	lsls	r4, r3, #31
 80051be:	d504      	bpl.n	80051ca <_vfiprintf_r+0x4e>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	b01d      	add	sp, #116	@ 0x74
 80051c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	0598      	lsls	r0, r3, #22
 80051ce:	d4f7      	bmi.n	80051c0 <_vfiprintf_r+0x44>
 80051d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051d2:	f7ff feaf 	bl	8004f34 <__retarget_lock_release_recursive>
 80051d6:	e7f3      	b.n	80051c0 <_vfiprintf_r+0x44>
 80051d8:	2300      	movs	r3, #0
 80051da:	9309      	str	r3, [sp, #36]	@ 0x24
 80051dc:	2320      	movs	r3, #32
 80051de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051e6:	2330      	movs	r3, #48	@ 0x30
 80051e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005398 <_vfiprintf_r+0x21c>
 80051ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051f0:	f04f 0901 	mov.w	r9, #1
 80051f4:	4623      	mov	r3, r4
 80051f6:	469a      	mov	sl, r3
 80051f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051fc:	b10a      	cbz	r2, 8005202 <_vfiprintf_r+0x86>
 80051fe:	2a25      	cmp	r2, #37	@ 0x25
 8005200:	d1f9      	bne.n	80051f6 <_vfiprintf_r+0x7a>
 8005202:	ebba 0b04 	subs.w	fp, sl, r4
 8005206:	d00b      	beq.n	8005220 <_vfiprintf_r+0xa4>
 8005208:	465b      	mov	r3, fp
 800520a:	4622      	mov	r2, r4
 800520c:	4629      	mov	r1, r5
 800520e:	4630      	mov	r0, r6
 8005210:	f7ff ffa1 	bl	8005156 <__sfputs_r>
 8005214:	3001      	adds	r0, #1
 8005216:	f000 80a7 	beq.w	8005368 <_vfiprintf_r+0x1ec>
 800521a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800521c:	445a      	add	r2, fp
 800521e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005220:	f89a 3000 	ldrb.w	r3, [sl]
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 809f 	beq.w	8005368 <_vfiprintf_r+0x1ec>
 800522a:	2300      	movs	r3, #0
 800522c:	f04f 32ff 	mov.w	r2, #4294967295
 8005230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005234:	f10a 0a01 	add.w	sl, sl, #1
 8005238:	9304      	str	r3, [sp, #16]
 800523a:	9307      	str	r3, [sp, #28]
 800523c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005240:	931a      	str	r3, [sp, #104]	@ 0x68
 8005242:	4654      	mov	r4, sl
 8005244:	2205      	movs	r2, #5
 8005246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524a:	4853      	ldr	r0, [pc, #332]	@ (8005398 <_vfiprintf_r+0x21c>)
 800524c:	f7fa ffe0 	bl	8000210 <memchr>
 8005250:	9a04      	ldr	r2, [sp, #16]
 8005252:	b9d8      	cbnz	r0, 800528c <_vfiprintf_r+0x110>
 8005254:	06d1      	lsls	r1, r2, #27
 8005256:	bf44      	itt	mi
 8005258:	2320      	movmi	r3, #32
 800525a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800525e:	0713      	lsls	r3, r2, #28
 8005260:	bf44      	itt	mi
 8005262:	232b      	movmi	r3, #43	@ 0x2b
 8005264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005268:	f89a 3000 	ldrb.w	r3, [sl]
 800526c:	2b2a      	cmp	r3, #42	@ 0x2a
 800526e:	d015      	beq.n	800529c <_vfiprintf_r+0x120>
 8005270:	9a07      	ldr	r2, [sp, #28]
 8005272:	4654      	mov	r4, sl
 8005274:	2000      	movs	r0, #0
 8005276:	f04f 0c0a 	mov.w	ip, #10
 800527a:	4621      	mov	r1, r4
 800527c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005280:	3b30      	subs	r3, #48	@ 0x30
 8005282:	2b09      	cmp	r3, #9
 8005284:	d94b      	bls.n	800531e <_vfiprintf_r+0x1a2>
 8005286:	b1b0      	cbz	r0, 80052b6 <_vfiprintf_r+0x13a>
 8005288:	9207      	str	r2, [sp, #28]
 800528a:	e014      	b.n	80052b6 <_vfiprintf_r+0x13a>
 800528c:	eba0 0308 	sub.w	r3, r0, r8
 8005290:	fa09 f303 	lsl.w	r3, r9, r3
 8005294:	4313      	orrs	r3, r2
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	46a2      	mov	sl, r4
 800529a:	e7d2      	b.n	8005242 <_vfiprintf_r+0xc6>
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	1d19      	adds	r1, r3, #4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	9103      	str	r1, [sp, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bfbb      	ittet	lt
 80052a8:	425b      	neglt	r3, r3
 80052aa:	f042 0202 	orrlt.w	r2, r2, #2
 80052ae:	9307      	strge	r3, [sp, #28]
 80052b0:	9307      	strlt	r3, [sp, #28]
 80052b2:	bfb8      	it	lt
 80052b4:	9204      	strlt	r2, [sp, #16]
 80052b6:	7823      	ldrb	r3, [r4, #0]
 80052b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80052ba:	d10a      	bne.n	80052d2 <_vfiprintf_r+0x156>
 80052bc:	7863      	ldrb	r3, [r4, #1]
 80052be:	2b2a      	cmp	r3, #42	@ 0x2a
 80052c0:	d132      	bne.n	8005328 <_vfiprintf_r+0x1ac>
 80052c2:	9b03      	ldr	r3, [sp, #12]
 80052c4:	1d1a      	adds	r2, r3, #4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	9203      	str	r2, [sp, #12]
 80052ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052ce:	3402      	adds	r4, #2
 80052d0:	9305      	str	r3, [sp, #20]
 80052d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053a8 <_vfiprintf_r+0x22c>
 80052d6:	7821      	ldrb	r1, [r4, #0]
 80052d8:	2203      	movs	r2, #3
 80052da:	4650      	mov	r0, sl
 80052dc:	f7fa ff98 	bl	8000210 <memchr>
 80052e0:	b138      	cbz	r0, 80052f2 <_vfiprintf_r+0x176>
 80052e2:	9b04      	ldr	r3, [sp, #16]
 80052e4:	eba0 000a 	sub.w	r0, r0, sl
 80052e8:	2240      	movs	r2, #64	@ 0x40
 80052ea:	4082      	lsls	r2, r0
 80052ec:	4313      	orrs	r3, r2
 80052ee:	3401      	adds	r4, #1
 80052f0:	9304      	str	r3, [sp, #16]
 80052f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f6:	4829      	ldr	r0, [pc, #164]	@ (800539c <_vfiprintf_r+0x220>)
 80052f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052fc:	2206      	movs	r2, #6
 80052fe:	f7fa ff87 	bl	8000210 <memchr>
 8005302:	2800      	cmp	r0, #0
 8005304:	d03f      	beq.n	8005386 <_vfiprintf_r+0x20a>
 8005306:	4b26      	ldr	r3, [pc, #152]	@ (80053a0 <_vfiprintf_r+0x224>)
 8005308:	bb1b      	cbnz	r3, 8005352 <_vfiprintf_r+0x1d6>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	3307      	adds	r3, #7
 800530e:	f023 0307 	bic.w	r3, r3, #7
 8005312:	3308      	adds	r3, #8
 8005314:	9303      	str	r3, [sp, #12]
 8005316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005318:	443b      	add	r3, r7
 800531a:	9309      	str	r3, [sp, #36]	@ 0x24
 800531c:	e76a      	b.n	80051f4 <_vfiprintf_r+0x78>
 800531e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005322:	460c      	mov	r4, r1
 8005324:	2001      	movs	r0, #1
 8005326:	e7a8      	b.n	800527a <_vfiprintf_r+0xfe>
 8005328:	2300      	movs	r3, #0
 800532a:	3401      	adds	r4, #1
 800532c:	9305      	str	r3, [sp, #20]
 800532e:	4619      	mov	r1, r3
 8005330:	f04f 0c0a 	mov.w	ip, #10
 8005334:	4620      	mov	r0, r4
 8005336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800533a:	3a30      	subs	r2, #48	@ 0x30
 800533c:	2a09      	cmp	r2, #9
 800533e:	d903      	bls.n	8005348 <_vfiprintf_r+0x1cc>
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0c6      	beq.n	80052d2 <_vfiprintf_r+0x156>
 8005344:	9105      	str	r1, [sp, #20]
 8005346:	e7c4      	b.n	80052d2 <_vfiprintf_r+0x156>
 8005348:	fb0c 2101 	mla	r1, ip, r1, r2
 800534c:	4604      	mov	r4, r0
 800534e:	2301      	movs	r3, #1
 8005350:	e7f0      	b.n	8005334 <_vfiprintf_r+0x1b8>
 8005352:	ab03      	add	r3, sp, #12
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	462a      	mov	r2, r5
 8005358:	4b12      	ldr	r3, [pc, #72]	@ (80053a4 <_vfiprintf_r+0x228>)
 800535a:	a904      	add	r1, sp, #16
 800535c:	4630      	mov	r0, r6
 800535e:	f3af 8000 	nop.w
 8005362:	4607      	mov	r7, r0
 8005364:	1c78      	adds	r0, r7, #1
 8005366:	d1d6      	bne.n	8005316 <_vfiprintf_r+0x19a>
 8005368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800536a:	07d9      	lsls	r1, r3, #31
 800536c:	d405      	bmi.n	800537a <_vfiprintf_r+0x1fe>
 800536e:	89ab      	ldrh	r3, [r5, #12]
 8005370:	059a      	lsls	r2, r3, #22
 8005372:	d402      	bmi.n	800537a <_vfiprintf_r+0x1fe>
 8005374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005376:	f7ff fddd 	bl	8004f34 <__retarget_lock_release_recursive>
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	065b      	lsls	r3, r3, #25
 800537e:	f53f af1f 	bmi.w	80051c0 <_vfiprintf_r+0x44>
 8005382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005384:	e71e      	b.n	80051c4 <_vfiprintf_r+0x48>
 8005386:	ab03      	add	r3, sp, #12
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	462a      	mov	r2, r5
 800538c:	4b05      	ldr	r3, [pc, #20]	@ (80053a4 <_vfiprintf_r+0x228>)
 800538e:	a904      	add	r1, sp, #16
 8005390:	4630      	mov	r0, r6
 8005392:	f000 f879 	bl	8005488 <_printf_i>
 8005396:	e7e4      	b.n	8005362 <_vfiprintf_r+0x1e6>
 8005398:	08005bfc 	.word	0x08005bfc
 800539c:	08005c06 	.word	0x08005c06
 80053a0:	00000000 	.word	0x00000000
 80053a4:	08005157 	.word	0x08005157
 80053a8:	08005c02 	.word	0x08005c02

080053ac <_printf_common>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	4616      	mov	r6, r2
 80053b2:	4698      	mov	r8, r3
 80053b4:	688a      	ldr	r2, [r1, #8]
 80053b6:	690b      	ldr	r3, [r1, #16]
 80053b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053bc:	4293      	cmp	r3, r2
 80053be:	bfb8      	it	lt
 80053c0:	4613      	movlt	r3, r2
 80053c2:	6033      	str	r3, [r6, #0]
 80053c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053c8:	4607      	mov	r7, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	b10a      	cbz	r2, 80053d2 <_printf_common+0x26>
 80053ce:	3301      	adds	r3, #1
 80053d0:	6033      	str	r3, [r6, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	0699      	lsls	r1, r3, #26
 80053d6:	bf42      	ittt	mi
 80053d8:	6833      	ldrmi	r3, [r6, #0]
 80053da:	3302      	addmi	r3, #2
 80053dc:	6033      	strmi	r3, [r6, #0]
 80053de:	6825      	ldr	r5, [r4, #0]
 80053e0:	f015 0506 	ands.w	r5, r5, #6
 80053e4:	d106      	bne.n	80053f4 <_printf_common+0x48>
 80053e6:	f104 0a19 	add.w	sl, r4, #25
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	6832      	ldr	r2, [r6, #0]
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	dc26      	bgt.n	8005442 <_printf_common+0x96>
 80053f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053f8:	6822      	ldr	r2, [r4, #0]
 80053fa:	3b00      	subs	r3, #0
 80053fc:	bf18      	it	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	0692      	lsls	r2, r2, #26
 8005402:	d42b      	bmi.n	800545c <_printf_common+0xb0>
 8005404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005408:	4641      	mov	r1, r8
 800540a:	4638      	mov	r0, r7
 800540c:	47c8      	blx	r9
 800540e:	3001      	adds	r0, #1
 8005410:	d01e      	beq.n	8005450 <_printf_common+0xa4>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	6922      	ldr	r2, [r4, #16]
 8005416:	f003 0306 	and.w	r3, r3, #6
 800541a:	2b04      	cmp	r3, #4
 800541c:	bf02      	ittt	eq
 800541e:	68e5      	ldreq	r5, [r4, #12]
 8005420:	6833      	ldreq	r3, [r6, #0]
 8005422:	1aed      	subeq	r5, r5, r3
 8005424:	68a3      	ldr	r3, [r4, #8]
 8005426:	bf0c      	ite	eq
 8005428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800542c:	2500      	movne	r5, #0
 800542e:	4293      	cmp	r3, r2
 8005430:	bfc4      	itt	gt
 8005432:	1a9b      	subgt	r3, r3, r2
 8005434:	18ed      	addgt	r5, r5, r3
 8005436:	2600      	movs	r6, #0
 8005438:	341a      	adds	r4, #26
 800543a:	42b5      	cmp	r5, r6
 800543c:	d11a      	bne.n	8005474 <_printf_common+0xc8>
 800543e:	2000      	movs	r0, #0
 8005440:	e008      	b.n	8005454 <_printf_common+0xa8>
 8005442:	2301      	movs	r3, #1
 8005444:	4652      	mov	r2, sl
 8005446:	4641      	mov	r1, r8
 8005448:	4638      	mov	r0, r7
 800544a:	47c8      	blx	r9
 800544c:	3001      	adds	r0, #1
 800544e:	d103      	bne.n	8005458 <_printf_common+0xac>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005458:	3501      	adds	r5, #1
 800545a:	e7c6      	b.n	80053ea <_printf_common+0x3e>
 800545c:	18e1      	adds	r1, r4, r3
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	2030      	movs	r0, #48	@ 0x30
 8005462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005466:	4422      	add	r2, r4
 8005468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800546c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005470:	3302      	adds	r3, #2
 8005472:	e7c7      	b.n	8005404 <_printf_common+0x58>
 8005474:	2301      	movs	r3, #1
 8005476:	4622      	mov	r2, r4
 8005478:	4641      	mov	r1, r8
 800547a:	4638      	mov	r0, r7
 800547c:	47c8      	blx	r9
 800547e:	3001      	adds	r0, #1
 8005480:	d0e6      	beq.n	8005450 <_printf_common+0xa4>
 8005482:	3601      	adds	r6, #1
 8005484:	e7d9      	b.n	800543a <_printf_common+0x8e>
	...

08005488 <_printf_i>:
 8005488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	7e0f      	ldrb	r7, [r1, #24]
 800548e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005490:	2f78      	cmp	r7, #120	@ 0x78
 8005492:	4691      	mov	r9, r2
 8005494:	4680      	mov	r8, r0
 8005496:	460c      	mov	r4, r1
 8005498:	469a      	mov	sl, r3
 800549a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800549e:	d807      	bhi.n	80054b0 <_printf_i+0x28>
 80054a0:	2f62      	cmp	r7, #98	@ 0x62
 80054a2:	d80a      	bhi.n	80054ba <_printf_i+0x32>
 80054a4:	2f00      	cmp	r7, #0
 80054a6:	f000 80d2 	beq.w	800564e <_printf_i+0x1c6>
 80054aa:	2f58      	cmp	r7, #88	@ 0x58
 80054ac:	f000 80b9 	beq.w	8005622 <_printf_i+0x19a>
 80054b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054b8:	e03a      	b.n	8005530 <_printf_i+0xa8>
 80054ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054be:	2b15      	cmp	r3, #21
 80054c0:	d8f6      	bhi.n	80054b0 <_printf_i+0x28>
 80054c2:	a101      	add	r1, pc, #4	@ (adr r1, 80054c8 <_printf_i+0x40>)
 80054c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005535 	.word	0x08005535
 80054d0:	080054b1 	.word	0x080054b1
 80054d4:	080054b1 	.word	0x080054b1
 80054d8:	080054b1 	.word	0x080054b1
 80054dc:	080054b1 	.word	0x080054b1
 80054e0:	08005535 	.word	0x08005535
 80054e4:	080054b1 	.word	0x080054b1
 80054e8:	080054b1 	.word	0x080054b1
 80054ec:	080054b1 	.word	0x080054b1
 80054f0:	080054b1 	.word	0x080054b1
 80054f4:	08005635 	.word	0x08005635
 80054f8:	0800555f 	.word	0x0800555f
 80054fc:	080055ef 	.word	0x080055ef
 8005500:	080054b1 	.word	0x080054b1
 8005504:	080054b1 	.word	0x080054b1
 8005508:	08005657 	.word	0x08005657
 800550c:	080054b1 	.word	0x080054b1
 8005510:	0800555f 	.word	0x0800555f
 8005514:	080054b1 	.word	0x080054b1
 8005518:	080054b1 	.word	0x080054b1
 800551c:	080055f7 	.word	0x080055f7
 8005520:	6833      	ldr	r3, [r6, #0]
 8005522:	1d1a      	adds	r2, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6032      	str	r2, [r6, #0]
 8005528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800552c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005530:	2301      	movs	r3, #1
 8005532:	e09d      	b.n	8005670 <_printf_i+0x1e8>
 8005534:	6833      	ldr	r3, [r6, #0]
 8005536:	6820      	ldr	r0, [r4, #0]
 8005538:	1d19      	adds	r1, r3, #4
 800553a:	6031      	str	r1, [r6, #0]
 800553c:	0606      	lsls	r6, r0, #24
 800553e:	d501      	bpl.n	8005544 <_printf_i+0xbc>
 8005540:	681d      	ldr	r5, [r3, #0]
 8005542:	e003      	b.n	800554c <_printf_i+0xc4>
 8005544:	0645      	lsls	r5, r0, #25
 8005546:	d5fb      	bpl.n	8005540 <_printf_i+0xb8>
 8005548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800554c:	2d00      	cmp	r5, #0
 800554e:	da03      	bge.n	8005558 <_printf_i+0xd0>
 8005550:	232d      	movs	r3, #45	@ 0x2d
 8005552:	426d      	negs	r5, r5
 8005554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005558:	4859      	ldr	r0, [pc, #356]	@ (80056c0 <_printf_i+0x238>)
 800555a:	230a      	movs	r3, #10
 800555c:	e011      	b.n	8005582 <_printf_i+0xfa>
 800555e:	6821      	ldr	r1, [r4, #0]
 8005560:	6833      	ldr	r3, [r6, #0]
 8005562:	0608      	lsls	r0, r1, #24
 8005564:	f853 5b04 	ldr.w	r5, [r3], #4
 8005568:	d402      	bmi.n	8005570 <_printf_i+0xe8>
 800556a:	0649      	lsls	r1, r1, #25
 800556c:	bf48      	it	mi
 800556e:	b2ad      	uxthmi	r5, r5
 8005570:	2f6f      	cmp	r7, #111	@ 0x6f
 8005572:	4853      	ldr	r0, [pc, #332]	@ (80056c0 <_printf_i+0x238>)
 8005574:	6033      	str	r3, [r6, #0]
 8005576:	bf14      	ite	ne
 8005578:	230a      	movne	r3, #10
 800557a:	2308      	moveq	r3, #8
 800557c:	2100      	movs	r1, #0
 800557e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005582:	6866      	ldr	r6, [r4, #4]
 8005584:	60a6      	str	r6, [r4, #8]
 8005586:	2e00      	cmp	r6, #0
 8005588:	bfa2      	ittt	ge
 800558a:	6821      	ldrge	r1, [r4, #0]
 800558c:	f021 0104 	bicge.w	r1, r1, #4
 8005590:	6021      	strge	r1, [r4, #0]
 8005592:	b90d      	cbnz	r5, 8005598 <_printf_i+0x110>
 8005594:	2e00      	cmp	r6, #0
 8005596:	d04b      	beq.n	8005630 <_printf_i+0x1a8>
 8005598:	4616      	mov	r6, r2
 800559a:	fbb5 f1f3 	udiv	r1, r5, r3
 800559e:	fb03 5711 	mls	r7, r3, r1, r5
 80055a2:	5dc7      	ldrb	r7, [r0, r7]
 80055a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055a8:	462f      	mov	r7, r5
 80055aa:	42bb      	cmp	r3, r7
 80055ac:	460d      	mov	r5, r1
 80055ae:	d9f4      	bls.n	800559a <_printf_i+0x112>
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d10b      	bne.n	80055cc <_printf_i+0x144>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	07df      	lsls	r7, r3, #31
 80055b8:	d508      	bpl.n	80055cc <_printf_i+0x144>
 80055ba:	6923      	ldr	r3, [r4, #16]
 80055bc:	6861      	ldr	r1, [r4, #4]
 80055be:	4299      	cmp	r1, r3
 80055c0:	bfde      	ittt	le
 80055c2:	2330      	movle	r3, #48	@ 0x30
 80055c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055cc:	1b92      	subs	r2, r2, r6
 80055ce:	6122      	str	r2, [r4, #16]
 80055d0:	f8cd a000 	str.w	sl, [sp]
 80055d4:	464b      	mov	r3, r9
 80055d6:	aa03      	add	r2, sp, #12
 80055d8:	4621      	mov	r1, r4
 80055da:	4640      	mov	r0, r8
 80055dc:	f7ff fee6 	bl	80053ac <_printf_common>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d14a      	bne.n	800567a <_printf_i+0x1f2>
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	b004      	add	sp, #16
 80055ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	f043 0320 	orr.w	r3, r3, #32
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	4833      	ldr	r0, [pc, #204]	@ (80056c4 <_printf_i+0x23c>)
 80055f8:	2778      	movs	r7, #120	@ 0x78
 80055fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	6831      	ldr	r1, [r6, #0]
 8005602:	061f      	lsls	r7, r3, #24
 8005604:	f851 5b04 	ldr.w	r5, [r1], #4
 8005608:	d402      	bmi.n	8005610 <_printf_i+0x188>
 800560a:	065f      	lsls	r7, r3, #25
 800560c:	bf48      	it	mi
 800560e:	b2ad      	uxthmi	r5, r5
 8005610:	6031      	str	r1, [r6, #0]
 8005612:	07d9      	lsls	r1, r3, #31
 8005614:	bf44      	itt	mi
 8005616:	f043 0320 	orrmi.w	r3, r3, #32
 800561a:	6023      	strmi	r3, [r4, #0]
 800561c:	b11d      	cbz	r5, 8005626 <_printf_i+0x19e>
 800561e:	2310      	movs	r3, #16
 8005620:	e7ac      	b.n	800557c <_printf_i+0xf4>
 8005622:	4827      	ldr	r0, [pc, #156]	@ (80056c0 <_printf_i+0x238>)
 8005624:	e7e9      	b.n	80055fa <_printf_i+0x172>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	f023 0320 	bic.w	r3, r3, #32
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	e7f6      	b.n	800561e <_printf_i+0x196>
 8005630:	4616      	mov	r6, r2
 8005632:	e7bd      	b.n	80055b0 <_printf_i+0x128>
 8005634:	6833      	ldr	r3, [r6, #0]
 8005636:	6825      	ldr	r5, [r4, #0]
 8005638:	6961      	ldr	r1, [r4, #20]
 800563a:	1d18      	adds	r0, r3, #4
 800563c:	6030      	str	r0, [r6, #0]
 800563e:	062e      	lsls	r6, r5, #24
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	d501      	bpl.n	8005648 <_printf_i+0x1c0>
 8005644:	6019      	str	r1, [r3, #0]
 8005646:	e002      	b.n	800564e <_printf_i+0x1c6>
 8005648:	0668      	lsls	r0, r5, #25
 800564a:	d5fb      	bpl.n	8005644 <_printf_i+0x1bc>
 800564c:	8019      	strh	r1, [r3, #0]
 800564e:	2300      	movs	r3, #0
 8005650:	6123      	str	r3, [r4, #16]
 8005652:	4616      	mov	r6, r2
 8005654:	e7bc      	b.n	80055d0 <_printf_i+0x148>
 8005656:	6833      	ldr	r3, [r6, #0]
 8005658:	1d1a      	adds	r2, r3, #4
 800565a:	6032      	str	r2, [r6, #0]
 800565c:	681e      	ldr	r6, [r3, #0]
 800565e:	6862      	ldr	r2, [r4, #4]
 8005660:	2100      	movs	r1, #0
 8005662:	4630      	mov	r0, r6
 8005664:	f7fa fdd4 	bl	8000210 <memchr>
 8005668:	b108      	cbz	r0, 800566e <_printf_i+0x1e6>
 800566a:	1b80      	subs	r0, r0, r6
 800566c:	6060      	str	r0, [r4, #4]
 800566e:	6863      	ldr	r3, [r4, #4]
 8005670:	6123      	str	r3, [r4, #16]
 8005672:	2300      	movs	r3, #0
 8005674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005678:	e7aa      	b.n	80055d0 <_printf_i+0x148>
 800567a:	6923      	ldr	r3, [r4, #16]
 800567c:	4632      	mov	r2, r6
 800567e:	4649      	mov	r1, r9
 8005680:	4640      	mov	r0, r8
 8005682:	47d0      	blx	sl
 8005684:	3001      	adds	r0, #1
 8005686:	d0ad      	beq.n	80055e4 <_printf_i+0x15c>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	079b      	lsls	r3, r3, #30
 800568c:	d413      	bmi.n	80056b6 <_printf_i+0x22e>
 800568e:	68e0      	ldr	r0, [r4, #12]
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	4298      	cmp	r0, r3
 8005694:	bfb8      	it	lt
 8005696:	4618      	movlt	r0, r3
 8005698:	e7a6      	b.n	80055e8 <_printf_i+0x160>
 800569a:	2301      	movs	r3, #1
 800569c:	4632      	mov	r2, r6
 800569e:	4649      	mov	r1, r9
 80056a0:	4640      	mov	r0, r8
 80056a2:	47d0      	blx	sl
 80056a4:	3001      	adds	r0, #1
 80056a6:	d09d      	beq.n	80055e4 <_printf_i+0x15c>
 80056a8:	3501      	adds	r5, #1
 80056aa:	68e3      	ldr	r3, [r4, #12]
 80056ac:	9903      	ldr	r1, [sp, #12]
 80056ae:	1a5b      	subs	r3, r3, r1
 80056b0:	42ab      	cmp	r3, r5
 80056b2:	dcf2      	bgt.n	800569a <_printf_i+0x212>
 80056b4:	e7eb      	b.n	800568e <_printf_i+0x206>
 80056b6:	2500      	movs	r5, #0
 80056b8:	f104 0619 	add.w	r6, r4, #25
 80056bc:	e7f5      	b.n	80056aa <_printf_i+0x222>
 80056be:	bf00      	nop
 80056c0:	08005c0d 	.word	0x08005c0d
 80056c4:	08005c1e 	.word	0x08005c1e

080056c8 <__sflush_r>:
 80056c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d0:	0716      	lsls	r6, r2, #28
 80056d2:	4605      	mov	r5, r0
 80056d4:	460c      	mov	r4, r1
 80056d6:	d454      	bmi.n	8005782 <__sflush_r+0xba>
 80056d8:	684b      	ldr	r3, [r1, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	dc02      	bgt.n	80056e4 <__sflush_r+0x1c>
 80056de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	dd48      	ble.n	8005776 <__sflush_r+0xae>
 80056e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056e6:	2e00      	cmp	r6, #0
 80056e8:	d045      	beq.n	8005776 <__sflush_r+0xae>
 80056ea:	2300      	movs	r3, #0
 80056ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056f0:	682f      	ldr	r7, [r5, #0]
 80056f2:	6a21      	ldr	r1, [r4, #32]
 80056f4:	602b      	str	r3, [r5, #0]
 80056f6:	d030      	beq.n	800575a <__sflush_r+0x92>
 80056f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056fa:	89a3      	ldrh	r3, [r4, #12]
 80056fc:	0759      	lsls	r1, r3, #29
 80056fe:	d505      	bpl.n	800570c <__sflush_r+0x44>
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	1ad2      	subs	r2, r2, r3
 8005704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005706:	b10b      	cbz	r3, 800570c <__sflush_r+0x44>
 8005708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800570a:	1ad2      	subs	r2, r2, r3
 800570c:	2300      	movs	r3, #0
 800570e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005710:	6a21      	ldr	r1, [r4, #32]
 8005712:	4628      	mov	r0, r5
 8005714:	47b0      	blx	r6
 8005716:	1c43      	adds	r3, r0, #1
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	d106      	bne.n	800572a <__sflush_r+0x62>
 800571c:	6829      	ldr	r1, [r5, #0]
 800571e:	291d      	cmp	r1, #29
 8005720:	d82b      	bhi.n	800577a <__sflush_r+0xb2>
 8005722:	4a2a      	ldr	r2, [pc, #168]	@ (80057cc <__sflush_r+0x104>)
 8005724:	410a      	asrs	r2, r1
 8005726:	07d6      	lsls	r6, r2, #31
 8005728:	d427      	bmi.n	800577a <__sflush_r+0xb2>
 800572a:	2200      	movs	r2, #0
 800572c:	6062      	str	r2, [r4, #4]
 800572e:	04d9      	lsls	r1, r3, #19
 8005730:	6922      	ldr	r2, [r4, #16]
 8005732:	6022      	str	r2, [r4, #0]
 8005734:	d504      	bpl.n	8005740 <__sflush_r+0x78>
 8005736:	1c42      	adds	r2, r0, #1
 8005738:	d101      	bne.n	800573e <__sflush_r+0x76>
 800573a:	682b      	ldr	r3, [r5, #0]
 800573c:	b903      	cbnz	r3, 8005740 <__sflush_r+0x78>
 800573e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005742:	602f      	str	r7, [r5, #0]
 8005744:	b1b9      	cbz	r1, 8005776 <__sflush_r+0xae>
 8005746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800574a:	4299      	cmp	r1, r3
 800574c:	d002      	beq.n	8005754 <__sflush_r+0x8c>
 800574e:	4628      	mov	r0, r5
 8005750:	f7ff fbf2 	bl	8004f38 <_free_r>
 8005754:	2300      	movs	r3, #0
 8005756:	6363      	str	r3, [r4, #52]	@ 0x34
 8005758:	e00d      	b.n	8005776 <__sflush_r+0xae>
 800575a:	2301      	movs	r3, #1
 800575c:	4628      	mov	r0, r5
 800575e:	47b0      	blx	r6
 8005760:	4602      	mov	r2, r0
 8005762:	1c50      	adds	r0, r2, #1
 8005764:	d1c9      	bne.n	80056fa <__sflush_r+0x32>
 8005766:	682b      	ldr	r3, [r5, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0c6      	beq.n	80056fa <__sflush_r+0x32>
 800576c:	2b1d      	cmp	r3, #29
 800576e:	d001      	beq.n	8005774 <__sflush_r+0xac>
 8005770:	2b16      	cmp	r3, #22
 8005772:	d11e      	bne.n	80057b2 <__sflush_r+0xea>
 8005774:	602f      	str	r7, [r5, #0]
 8005776:	2000      	movs	r0, #0
 8005778:	e022      	b.n	80057c0 <__sflush_r+0xf8>
 800577a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800577e:	b21b      	sxth	r3, r3
 8005780:	e01b      	b.n	80057ba <__sflush_r+0xf2>
 8005782:	690f      	ldr	r7, [r1, #16]
 8005784:	2f00      	cmp	r7, #0
 8005786:	d0f6      	beq.n	8005776 <__sflush_r+0xae>
 8005788:	0793      	lsls	r3, r2, #30
 800578a:	680e      	ldr	r6, [r1, #0]
 800578c:	bf08      	it	eq
 800578e:	694b      	ldreq	r3, [r1, #20]
 8005790:	600f      	str	r7, [r1, #0]
 8005792:	bf18      	it	ne
 8005794:	2300      	movne	r3, #0
 8005796:	eba6 0807 	sub.w	r8, r6, r7
 800579a:	608b      	str	r3, [r1, #8]
 800579c:	f1b8 0f00 	cmp.w	r8, #0
 80057a0:	dde9      	ble.n	8005776 <__sflush_r+0xae>
 80057a2:	6a21      	ldr	r1, [r4, #32]
 80057a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80057a6:	4643      	mov	r3, r8
 80057a8:	463a      	mov	r2, r7
 80057aa:	4628      	mov	r0, r5
 80057ac:	47b0      	blx	r6
 80057ae:	2800      	cmp	r0, #0
 80057b0:	dc08      	bgt.n	80057c4 <__sflush_r+0xfc>
 80057b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ba:	81a3      	strh	r3, [r4, #12]
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295
 80057c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c4:	4407      	add	r7, r0
 80057c6:	eba8 0800 	sub.w	r8, r8, r0
 80057ca:	e7e7      	b.n	800579c <__sflush_r+0xd4>
 80057cc:	dfbffffe 	.word	0xdfbffffe

080057d0 <_fflush_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	690b      	ldr	r3, [r1, #16]
 80057d4:	4605      	mov	r5, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	b913      	cbnz	r3, 80057e0 <_fflush_r+0x10>
 80057da:	2500      	movs	r5, #0
 80057dc:	4628      	mov	r0, r5
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	b118      	cbz	r0, 80057ea <_fflush_r+0x1a>
 80057e2:	6a03      	ldr	r3, [r0, #32]
 80057e4:	b90b      	cbnz	r3, 80057ea <_fflush_r+0x1a>
 80057e6:	f7ff f9ad 	bl	8004b44 <__sinit>
 80057ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f3      	beq.n	80057da <_fflush_r+0xa>
 80057f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057f4:	07d0      	lsls	r0, r2, #31
 80057f6:	d404      	bmi.n	8005802 <_fflush_r+0x32>
 80057f8:	0599      	lsls	r1, r3, #22
 80057fa:	d402      	bmi.n	8005802 <_fflush_r+0x32>
 80057fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057fe:	f7ff fb98 	bl	8004f32 <__retarget_lock_acquire_recursive>
 8005802:	4628      	mov	r0, r5
 8005804:	4621      	mov	r1, r4
 8005806:	f7ff ff5f 	bl	80056c8 <__sflush_r>
 800580a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800580c:	07da      	lsls	r2, r3, #31
 800580e:	4605      	mov	r5, r0
 8005810:	d4e4      	bmi.n	80057dc <_fflush_r+0xc>
 8005812:	89a3      	ldrh	r3, [r4, #12]
 8005814:	059b      	lsls	r3, r3, #22
 8005816:	d4e1      	bmi.n	80057dc <_fflush_r+0xc>
 8005818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800581a:	f7ff fb8b 	bl	8004f34 <__retarget_lock_release_recursive>
 800581e:	e7dd      	b.n	80057dc <_fflush_r+0xc>

08005820 <__swhatbuf_r>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	460c      	mov	r4, r1
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	2900      	cmp	r1, #0
 800582a:	b096      	sub	sp, #88	@ 0x58
 800582c:	4615      	mov	r5, r2
 800582e:	461e      	mov	r6, r3
 8005830:	da0d      	bge.n	800584e <__swhatbuf_r+0x2e>
 8005832:	89a3      	ldrh	r3, [r4, #12]
 8005834:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	bf14      	ite	ne
 800583e:	2340      	movne	r3, #64	@ 0x40
 8005840:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005844:	2000      	movs	r0, #0
 8005846:	6031      	str	r1, [r6, #0]
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	b016      	add	sp, #88	@ 0x58
 800584c:	bd70      	pop	{r4, r5, r6, pc}
 800584e:	466a      	mov	r2, sp
 8005850:	f000 f848 	bl	80058e4 <_fstat_r>
 8005854:	2800      	cmp	r0, #0
 8005856:	dbec      	blt.n	8005832 <__swhatbuf_r+0x12>
 8005858:	9901      	ldr	r1, [sp, #4]
 800585a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800585e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005862:	4259      	negs	r1, r3
 8005864:	4159      	adcs	r1, r3
 8005866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800586a:	e7eb      	b.n	8005844 <__swhatbuf_r+0x24>

0800586c <__smakebuf_r>:
 800586c:	898b      	ldrh	r3, [r1, #12]
 800586e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005870:	079d      	lsls	r5, r3, #30
 8005872:	4606      	mov	r6, r0
 8005874:	460c      	mov	r4, r1
 8005876:	d507      	bpl.n	8005888 <__smakebuf_r+0x1c>
 8005878:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	2301      	movs	r3, #1
 8005882:	6163      	str	r3, [r4, #20]
 8005884:	b003      	add	sp, #12
 8005886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005888:	ab01      	add	r3, sp, #4
 800588a:	466a      	mov	r2, sp
 800588c:	f7ff ffc8 	bl	8005820 <__swhatbuf_r>
 8005890:	9f00      	ldr	r7, [sp, #0]
 8005892:	4605      	mov	r5, r0
 8005894:	4639      	mov	r1, r7
 8005896:	4630      	mov	r0, r6
 8005898:	f7ff fbba 	bl	8005010 <_malloc_r>
 800589c:	b948      	cbnz	r0, 80058b2 <__smakebuf_r+0x46>
 800589e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a2:	059a      	lsls	r2, r3, #22
 80058a4:	d4ee      	bmi.n	8005884 <__smakebuf_r+0x18>
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	f043 0302 	orr.w	r3, r3, #2
 80058ae:	81a3      	strh	r3, [r4, #12]
 80058b0:	e7e2      	b.n	8005878 <__smakebuf_r+0xc>
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	6020      	str	r0, [r4, #0]
 80058b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ba:	81a3      	strh	r3, [r4, #12]
 80058bc:	9b01      	ldr	r3, [sp, #4]
 80058be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80058c2:	b15b      	cbz	r3, 80058dc <__smakebuf_r+0x70>
 80058c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058c8:	4630      	mov	r0, r6
 80058ca:	f000 f81d 	bl	8005908 <_isatty_r>
 80058ce:	b128      	cbz	r0, 80058dc <__smakebuf_r+0x70>
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	81a3      	strh	r3, [r4, #12]
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	431d      	orrs	r5, r3
 80058e0:	81a5      	strh	r5, [r4, #12]
 80058e2:	e7cf      	b.n	8005884 <__smakebuf_r+0x18>

080058e4 <_fstat_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4d07      	ldr	r5, [pc, #28]	@ (8005904 <_fstat_r+0x20>)
 80058e8:	2300      	movs	r3, #0
 80058ea:	4604      	mov	r4, r0
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	602b      	str	r3, [r5, #0]
 80058f2:	f7fc f9e3 	bl	8001cbc <_fstat>
 80058f6:	1c43      	adds	r3, r0, #1
 80058f8:	d102      	bne.n	8005900 <_fstat_r+0x1c>
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	b103      	cbz	r3, 8005900 <_fstat_r+0x1c>
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	bd38      	pop	{r3, r4, r5, pc}
 8005902:	bf00      	nop
 8005904:	200002dc 	.word	0x200002dc

08005908 <_isatty_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d06      	ldr	r5, [pc, #24]	@ (8005924 <_isatty_r+0x1c>)
 800590c:	2300      	movs	r3, #0
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	f7fc f9e2 	bl	8001cdc <_isatty>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_isatty_r+0x1a>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_isatty_r+0x1a>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	200002dc 	.word	0x200002dc

08005928 <_sbrk_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	@ (8005944 <_sbrk_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fc f9ea 	bl	8001d0c <_sbrk>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_sbrk_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_sbrk_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	200002dc 	.word	0x200002dc

08005948 <_init>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr

08005954 <_fini>:
 8005954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005956:	bf00      	nop
 8005958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595a:	bc08      	pop	{r3}
 800595c:	469e      	mov	lr, r3
 800595e:	4770      	bx	lr
